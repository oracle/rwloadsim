# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# This file declares everything used by the
# various artificial workloads:

# bengsig  19-mar-2024 - cstorm
# bengsig  24-feb-2024 - waitsec, cpusec
# bengsig  19-dec-2023 - put xc_ignore_parsefailure in oltpxc
# bengsig   4-dec-2023 - Make aw_transaction also do parse failure with xc
# bengsig  16-nov-2023 - Fix hard/scan during 24h sim
# bengsig   8-aug-2023 - xc_badplan is a probability
# bengsig   1-aug-2023 - 24h simulation
# bengsig   9-may-2023 - Gradual badplan and hardparse
# bengsig   9-sep-2022 - Better aw query control
# bengsig  02-sep-2022 - awlen is not private
# bengsig         2017 - Creation


integer threads sum aw_transactions_made := 0;

private integer s_tokid, d_tokid, b_tokid, g_tokid;
private integer g_rwnum, d_rwnum, b_rwnum;
private integer s_col1;
private double g_val, b_val, d_val;
private string(100) d_fill, b_fill, g_fill;
private string(100) s_rowid;

$implicit:both

$if xc_enabled and !defined(eatcpu) $then
  $include:"eatcpu.rwl"
$endif

# and lots of SQL implementing the simulation
private sql sel_tok_sql
select rowid s_rowid from aw_tok where tokid=:s_tokid for update
/* aw_declaration.rwl SQL 1 */
/
end;

private sql upd_tok_sql
update aw_tok set col1=:s_col1 where rowid=:s_rowid
/* aw_declaration.rwl SQL 2 */
/
end;

$if xc_enabled $then
private sql upd_tok_sql_failure
update aw_tok set col1=:s_col1 wher rowid=:s_rowid
/* aw_declaration.rwl SQL 2 */
/
  $if xc_ignore_parsefailure $then
    ignoreerror;
  $endif
end;
$endif

private sql ins_det_sql
insert into aw_row(tokid, dat, fill, rwnum, runid, val)
values(:d_tokid, sysdate, :d_fill, :d_rwnum, :runnumber, :d_val)
/* aw_declaration.rwl SQL 3 */
/
# bind 1 d_tokid, 2 d_fill, 3 d_rwnum, 4 runnumber, 5 d_val;
end;

private sql upd_xtr_sql
update aw_xtr set val=:g_val
where rwnum=:g_rwnum and runid=:runnumber
/* aw_declaration.rwl SQL 4 */
/
# bind 1 g_val, 2 g_rwnum, 3 runnumber;
end;

private sql upd_det_sql
update aw_row set val=:d_val
where rwnum=:d_rwnum and runid=:runnumber
/* aw_declaration.rwl SQL 5 */
/
# bind 1 d_val, 2 d_rwnum, 3 runnumber;
end;

private sql ins_xin_sql
insert into aw_xin(tokid, dat, fill, rwnum, runid, val)
values(:b_tokid, sysdate, :b_fill, :b_rwnum, :runnumber, :b_val)
/* aw_declaration.rwl SQL 6 */
/
# bind 1 b_tokid, 2 b_fill, 3 b_rwnum, 4 runnumber, 5 b_val;
end;

private sql sel_xtr_sql
select tokid g_tokid, val g_val, fill g_fill
from aw_xtr
where rwnum=:g_rwnum and runid=:runnumber
/* aw_declaration.rwl SQL 7 */
/
# bind 1 g_rwnum, 2 runnumber;
# define 1 g_tokid, 2 g_val, 3 g_fill;
end;

private sql ins_xtr_sql
insert into aw_xtr(tokid, dat, fill, rwnum, runid, val)
values(:g_tokid, sysdate, :g_fill, :g_rwnum, :runnumber, :g_val)
/* aw_declaration.rwl SQL 8 */
/
# bind 1 g_tokid, 2 g_fill, 3 g_rwnum, 4 runnumber, 5 g_val;
end;

private integer my_loop:=0, my_thread;
# This MUST match the number used when aw_tok was filled
# when you ran aw_schema.sql
integer maxsessions := 200000;

# There an extra transactions in 10 percent
# of the cases.  You can vary this, but the impact
# of other values has never really been tested.
double extrapct := 10; # This is the standard

$if !defined(aw_instances) $then
  integer aw_instances := 0; # 0 means not running on RAC
$endif
private integer aw_myinst;

private sql get_inst
  select sys_context('USERENV','INSTANCE') aw_myinst from dual;
end;
  
procedure aw_transaction()
  # 
  my_loop += 1;
  my_thread := threadnumber is null ? 0 : threadnumber-1;
  aw_transactions_made := aw_transactions_made + 1;

  # Each token in aw_tok is reused over and over again and
  # the row is locked while inserting into the aw_row table.
  # To avoid index contention, make sure different threads/processes
  # separate token ids so we make the upper part of id the random
  # part.  If you have too much contention, consider increasing the
  # number of tokens, i.e. rows in aw_tok
  #
  # Adding 1 to threadcount is necessary as there is one more
  # thread (for the update to rwlrun) in process 1.
  if aw_instances then
    # On RAC, make affinity between s_tokid and instance
    get_inst;
    s_tokid := my_thread * proccount + procnumber-1 
      + proccount*(1+cstorm_threads+threadcount+wburst_count)*aw_myinst
        *uniform(1,maxsessions/((proccount+1)*(1+cstorm_threads+threadcount+wburst_count)*aw_instances)-1);
  else
    s_tokid := my_thread * proccount + procnumber-1 
      + proccount*(1+cstorm_threads+threadcount+wburst_count)
        *uniform(1,maxsessions/((proccount+1)*(1+cstorm_threads+threadcount+wburst_count))-1);
  end if;

$if !xc_enabled $then
  if fix_cursorleak is not null and uniform(0.0,1.0) < fix_cursorleak then
    modify sql sel_tok_sql leak;
    modify sql ins_det_sql leak;
    modify sql upd_tok_sql leak;
  end if;
  # cursor leak has no effect if we close the session
  # $if pool_type = "sessionpool" $then
  #   if fix_logoffrate is not null and uniform(0.0,1.0) < fix_logoffrate then
  #     modify database release;
  #   end if;
  # $endif
$endif

  # rwnum must be unique through the whole run but still have very different
  # values between processes/threads.  If the run is extremely long
  # you risk wrap around and will get loads of ORA-1.
  d_rwnum := my_loop * proccount * (1+cstorm_threads+threadcount+wburst_count) + procnumber * (1+cstorm_threads+threadcount+wburst_count) + my_thread;

  # run the normal part
  # lock the session row
  sel_tok_sql;

  # insert the aw_row
  d_fill := "abc" || uniform(0.0,123456789.0) || "efg";
  d_val := erlang2(1.0);
  d_tokid := s_tokid;
  ins_det_sql;

  # update the token
  s_col1 := uniform(1,1000000);
$if xc_enabled $then
  if uniform(0.0,1.0) < xc_parsefailure then
    upd_tok_sql_failure;
  else
    upd_tok_sql;
  end if;

  if xc_cpusec > 0 then
    eatcpu(erlang(xc_cpusec));
  end if;
  if xc_waitsec > 0 then
    wait erlang(xc_waitsec);
  end if;


$else
  upd_tok_sql;
$endif
  $if aw_sleep_avg is not null $then
    wait normalrandom(aw_sleep_avg,aw_sleep_avg*aw_sleep_fac);
  $endif

  commit;

  # do extra in 10% of the cases
  if uniform(0.0,1.0) < extrapct / 100.0 then
    # extra part 1

    # insert xtr
    g_tokid := s_tokid;
    g_rwnum := d_rwnum;
    g_fill := erlang(1000000.0) || "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa" || erlang2(100000.0);
    g_val := erlang2(25.0);
    ins_xtr_sql;

    # lock the token
    sel_tok_sql;
    sel_xtr_sql;
    b_tokid := s_tokid;
    b_rwnum := d_rwnum;
    b_fill := erlang(2000000.0) || "bbbbbbbbbbbbbbbbbbbbbbbbbbaaaaaaaaaaaaaaaaa" || erlang2(200000.0);
    b_val := erlang(100.0);
    # insert into xin
    ins_xin_sql;

    g_val := erlang2(25.0);
    # and update the row just inserted into xtr
    upd_xtr_sql;
    s_col1 := uniform(1,1000000);
    upd_tok_sql;
    commit;

    # part 2 is now no longer done
    #sel_tok_sql;
    #g_val := erlang2(25.0);
    #upd_xtr_sql;
    #s_col1 := uniform(1,1000000);
    #upd_tok_sql;
    #commit;
  end;
  $if xc_enabled and pool_type = "sessionpool" $then
    if uniform(0.0,1.0) < xc_logoffrate then
      modify database release;
    end if;
  $endif
end;

procedure test_aw_transaction()
  if threadnumber is null then
    extrapct := 200;
    aw_transaction();
    extrapct := 10;
    printline "runnumber=", runnumber;
  end;
end;

$iformat:%ld # Just a precaution, this is the default

# Implement the query with some
# likelihood of using real I/O
# or at least excersice the buffer cache
#
# In the early design, it was planned that
# any of the 100 columns would be used,
# but it only adds heavy parsing (and not much
# extra buffered read) as the indexes aren't
# very big.  So now, we only create index on
# the first 10 columns in aw_cols.rwl

# make aw_cols_skew sensible
if aw_cols_skew is not null and aw_cols_skew <= 1 then
  aw_cols_skew := 1;
end if;

# The aw_cols_query_factor is roughly the same as the 
# number of rows being read in each aw_cols query
double awlen := 0.00001 * aw_cols_query_factor / exp(2.0,aw_cols_256MB_doublings);

procedure awindex_query()

  string txt;
  double cone, ctwo, clo, chi;
  integer c, cnt;
$if s24hour $then
  double myrunsec := runseconds();
$endif

  sql awqry
    # define 1 cone, 2 ctwo, 3 txt;
    # bind 1 clo, 2 chi;
    array 10;
  end;

  # Pick a column to query, only 0..9

  c := uniform(0,9)
    $if xc_enabled $then
      # xc_badplan is the probability of using full table scan
      # when 0, never, when 1, always
      # if bad plan is chosen, scatter the query over all non-indexed columns c10..c99
      # Note that this is very aggressive unless you reduce awindex_query_weight to e.g. 10
      + uniform(10,90)*(uniform(0.0,1.0)<xc_badplan)
    $endif
    $if s24hour and s24h_scan_prb > 0.0 $then
      + (( myrunsec > s24h_scan_beg + s24h_scan_skp*s24h_scan_avg
	  and
	  myrunsec%normalrandom(s24h_scan_avg,s24h_scan_std) between s24h_scan_beg and s24h_scan_end
	) ? 10*(uniform(0.0,1.0)<s24h_scan_prb) : 0)
    $endif 
    ;
  if aw_cols_skew is null then
    clo := uniform(0.0,1.0);
  else
    clo := 1.0 - 1.0/(1.0 + erlang(0.1/aw_cols_skew));
  end if;
  chi := clo + erlang(awlen);

  # We need the hint as otherwise Exadata smart
  # scan may kick in using storage index
  # and we want this to be regular buffered
  # access
  if c>=10 then
    modify sql awqry for
      "select /* aw no index on c" c ")*/ c0 cone, c" c " ctwo, txt 
       from aw_cols awc
       where c" c " between :clo and :chi";
  else
    modify sql awqry for
      "select /*+index(awc AW_COLS_I" c ")*/ c0 cone, c" c " ctwo, txt 
       from aw_cols awc
       where c" c " between :clo and :chi";
  end if;

  cnt := 0;
  for awqry loop
    cnt += 1;
    if aw_verbose>=2 then
      printline cnt, cone, ctwo, txt;
    end if;
  end loop;
  $if ai_sleep_avg is not null $then
    wait normalrandom(ai_sleep_avg,ai_sleep_avg*ai_sleep_fac);
  $endif
  $if xc_enabled $then
    if xc_cpusec > 0 then
      eatcpu(erlang(xc_cpusec));
    end if;
    if xc_waitsec > 0 then
      wait erlang(xc_waitsec);
    end if;
  $endif

  modify sql awqry release;

  if aw_verbose>=1 then
    printline "c" c, clo, chi, cnt, cone, ctwo, txt;
  end if;
  $if xc_enabled and pool_type = "sessionpool" $then
    if uniform(0.0,1.0) < xc_logoffrate then
      modify database release;
    end if;
  $endif

end awindex_query;

$implicit:off
