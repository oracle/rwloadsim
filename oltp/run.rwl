# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# bengsig  11-sep-2023 - max_sessionwait
# bengsig  31-jul-2023 - Add experimental 24h simulation
# bengsig  21-mar-2023 - Connection pool
# bengsig  14-mar-2023 - Allow turning off batch stuff
# bengsig  15-feb-2023 - Add activity burst
# bengsig  15-nov-2022 - Add rategradient
# bengsig  25-oct-2022 - External control
# bengsig         2019 - Creation

# make the real run

integer xc_run_dedicated := 0; 

$statistics:all

$include:"parameters.rwl"

$include:"results.rwl"

$include:"ovid2.rwl" 

$if xc_enabled and xc_run_dedicated $then
  pool_type := "dedicated";
$endif 

$include:"run_user.rwl"
$include:"oe_handle_orders.rwl"
$include:"oe_handle_products.rwl"
$include:"aw_declarations.rwl"
$include:"oe_long_session.rwl"

$if xc_enabled $then
 $include:"xc_implementation.rwl"
$endif

procedure makeorder()
  make_order(uniform(1,max_customer));
end;

procedure makeinvoices()
  make_invoices(uniform(1,max_customer));
end;

procedure shiporders()
  # This is the one called by ALL processes but quite rarely
  # make sure it doesn't monopolize the sessions
  if (threadnumber <= 1+rwl_max_pool/10) then
      ship_many_orders(2, 100);
  end if;
end;

procedure searchproduct()
  search_products( ovidstring(1) "%" ovidstring(1) );
end;

procedure queryorder()
  query_order(1);
end;

# Receive something at some wharehouse
integer threads sum warehouse_received := 0;

# This procedure set statistics, which implies it will 
# grab a session
procedure stockup() statistics
  integer warehouse_id := uniform(1,max_warehouse);
  integer s, stocks := uniform(1,max_product/100);
  # Add inventories to many products
  for s := 1..stocks loop
    add_inventory(warehouse_id, uniform(1,max_product), erlang2(1000));
  end loop;
  warehouse_received := warehouse_received + 1;
end;

random procedure array call_real
( makeorder makeorder_weight
, shiporders shiporder_weight
, makeinvoices makeinvoices_weight
, searchproduct searchproduct_weight
, complex_query complex_query_weight
, stockup stockup_weight
, aw_transaction aw_transaction_weight
, awindex_query awindex_query_weight
, queryorder queryorder_weight
);

procedure doeither()
$if time_out is not null $then
  if runseconds() > everyuntil+time_out then
    call_failure("");
  else
    call_real();
  end if;
$else
  call_real();
$endif
end;

# Called in the beginning of each process 
# if you observe that it returns a number larger than 0.00
# it means the rampump is too aggresive; change the rampump calculation 
# in the shell script in that case.
procedure showstart()
  for count 1 loop
    printline "procnumber", procnumber, "starting at", runseconds();
    fflush stdout;
  end loop;
end;

if s24hour and procnumber = 1 then
  # Create the markers for gnuplot, such that we can include it
  # when we later do the plot. This must be done here since
  # the parameters may have changed if we redo oltpplot.
  file s24markers >= resultsdir "/r" runnumber/1000 "/" runnumber "/s24markers.plot";
  double mrkleft, mrklen;
  writeline s24markers, "# scan markers:";
  mrkleft := s24h_scan_beg+s24h_scan_skp*s24h_scan_avg;
  mrklen  := s24h_scan_end-s24h_scan_beg;
  while mrkleft < runperiod loop
    fprintf s24markers,
      "set arrow from %.1f, graph -0.01 to %.1f, graph -0.01 lc rgb 'blue' heads size graph 0.005,90\n"
      , mrkleft, mrkleft+mrklen;
    mrkleft += s24h_scan_avg;
  end loop;
  writeline s24markers, "# hard parse markers:";
  mrkleft := s24h_hard_beg+s24h_hard_skp*s24h_hard_avg;
  mrklen  := s24h_hard_end-s24h_hard_beg;
  while mrkleft < runperiod loop
    fprintf s24markers,
      "set arrow from %.1f, graph -0.02 to %.1f, graph -0.02 lc rgb 'red' heads size graph 0.005,90\n"
      , mrkleft, mrkleft+mrklen;
    mrkleft += s24h_hard_avg;
  end loop;
  s24markers := null;
end if;


double threads sum maxtot := 0; # see below

$if wburst_count > 0 $then
  # We need some tricks to make sure the wburst only really
  # gets the database just before the burst starts
  # First the routine that just waits for the wburst to fire:
  procedure wburst_wait() nostatistics
    for start wburst_start count 1 loop
      null;
    end;
  end wburst_wait;

  # And now the routine that implements the burst
  procedure wburst_run() nostatistics
    $if pool_type = "dedicated" $then
      # This is a bit of a hack, but doing ociping makes
      # us get the reconnect session when we enter this
      # routine and not only when we call either of
      # the routines in doeither()
      ociping;
    $endif
    for
      queue every 
      $if normal_stddev is not null $then normalrandom(1,normal_stddev)* $else erlang2 $endif
        ( 0.08 / ratefactor)
      stop wburst_start + wburst_length
    loop
      doeither();
    end loop;
  end wburst_run;
$endif

procedure heartbeat() statistics
  # We only use this as a very simple
  # way to get entries in the persec table
  # that do NOT depend on the availability
  # of the real database under test
  null;
end;

procedure doociping() nostatistics
  ociping;
end;

procedure markrunning() nostatistics
  update rwlrun
  set nattr2=1
  , sattr2='Running'
  where runnumber=:runnumber;
  commit;
end;

$if xc_enabled $then
  # turn off delay and wburst
  if delay_length > 0 or delay_start > 0 then
    printline "Delay is turned off with external control";
    delay_length := 0;
    delay_start := 0;
  end if;
  if wburst_count > 0 then
    printline "Worker thread burst is turned off with external control";
    wburst_count := 0;
  end if;
$endif

# This is the command that really does everything!
run 
  # The heartbeat only requires the repository
  # database does two null operations per second
  threads 1 at rwloadsim
    for queue every 0.5 stop runperiod loop
      heartbeat();
$if xc_enabled $then
      if xc_stopnow=1 or xc_stopnow=2 then break; end if;
$endif
    end;
  end;

  threads 1 at rwloadsim
    # mark that we have started
    if procnumber = 1 then
      for count 1 loop
        $if pool_type = "sessionpool" $then
	  doociping() at rwl_run_pool; # make sure it can connect
	$endif
	markrunning();
      end;
    end if;
$if xc_enabled $then
    for start uniform(0.0,xc_refresh) every xc_refresh stop runperiod loop
      xc_read(procnumber=1);
      if xc_stopnow=1 or xc_stopnow=2 then break; end if;
    end loop;
    if xc_stopnow=1 or xc_stopnow=2 then
      if doawr then
        wait 20; # Allow some time for flushing things
      else
        wait 1;
      end if;
      xc_kill("process " procnumber);
    end if;
$endif
  end;

  # start the real workers

  # This is the large number of common threads that emulate
  # online users doing stuff
  threads threadcount at rwl_run_pool
$if s24hour $then
    double s24beg, s24end, s24lo, s24hi;
    s24beg := runperiod * normalrandom(s24h_high_beg,s24h_high_std);
    s24end := runperiod * normalrandom(s24h_high_end,s24h_high_std);
    s24lo  := normalrandom(s24h_load_lo,s24h_load_std);
    s24hi  := normalrandom(s24h_load_hi,s24h_load_std);
    if s24lo < 0.01 then s24lo := 0.01; end if;
    if s24hi < 0.5 then s24lo := 0.5; end if;
$endif
    for
      start threadnumber * rampfactor # ramp up
$if !simulatebatch $then
      queue every 
        $if aburst_workers is null $then
        $if normal_stddev is not null $then normalrandom(1,normal_stddev)* $else erlang2 $endif
	(
	  ((burst_length and runseconds() between burst_start and burst_start+burst_length) 
	    ? 1.0/burst_factor : 1.0 ) * 0.08
	  / (ratefactor
	       $if xc_enabled $then
		 * xc_ratefactor
	       $endif 
	       $if s24hour $then
	         * (runseconds() between s24beg and s24end ? s24hi : s24lo)
	       $endif
	       $if rategradient is not null $then
		 * (1.0+rategradient*(runseconds()-halfperiod)/halfperiod)
	       $endif
	    )
	)
	$else
	# when aburst is in place, we use a factor depending on 
	# being before or after the aburst_time
	threadnumber-1 <= aburst_workers or runseconds()>aburst_start
	? 
	# if after the time OR we are one of the always active threads
	# use a real every queue random time
        $if normal_stddev is not null $then normalrandom(1,normal_stddev)* $else erlang2 $endif
	(
	  ((burst_length and runseconds() between burst_start and burst_start+burst_length) 
	    ? 1.0/burst_factor : 1.0 ) * 0.08
	  / (ratefactor
		 * (runseconds()<=aburst_start ? aburst_pre_factor : aburst_post_factor)
	       $if xc_enabled $then
		 * xc_ratefactor
	       $endif 
	       $if rategradient is not null $then
		 * (1.0+rategradient*(runseconds()-halfperiod)/halfperiod)
	       $endif
	    )
	)
	# If before the time AND we are an inactive thread
	# only get active every half second to make sure these
	# threads don't spend cpu doing nothing
	: 0.5
	$endif
$endif 
      stop runperiod
    loop
$if xc_enabled $then
      # subtract 3 from threadnumber, as the first of the
      # real worker threads has number 3
      if threadnumber-3 <= threadcount * xc_loadfactor then
	doeither();
      end if;
      if xc_stopnow=1 or xc_stopnow=2 then
        break;
      end if;
$else
      $if aburst_workers is not null $then
	if threadnumber-1 <= aburst_workers or runseconds()>aburst_start then
	  # If were are using aburst, and we are doing something real
	  # which when the thread is an active one or if we are after
	  # the aburst_split time, call a real transaction
	  doeither();
	else
	  # Otherwise, just make sure we get a database
	  doociping();
	end;
      $else
	doeither();
      $endif
$endif
    end loop;
  end;

$if wburst_count > 0 $then
  # This is the wburst stuff with start of extra worker threads
  # Note that if pool_type = "dedicated", rwl_run_burst is
  # of type reconnect, which implies it doesn't really get the
  # connection until we call the first procedure that needs it
  # which is wburst_run. If we didn't do this, it would
  # be of type dedicated, but that implies the connections
  # are gotten as soon as the thread starts.
  threads wburst_count at 
    $if pool_type = "dedicated" $then
      rwl_run_burst
    $else
      rwl_run_pool
    $endif
    wburst_wait();
    wburst_run();
  end;
$endif
$if delay_length > 0 and pool_type = "sessionpool" $then
  threads 1 
    for start delay_start count 1 loop
      modify database rwl_run_pool sessionpool delay_min_pool .. delay_max_pool;
    end loop;
    for start delay_start+delay_length count 1 loop
      modify database rwl_run_pool sessionpool rwl_min_pool .. rwl_max_pool;
    end loop;
  end;
$endif

$if xc_enabled $then
  # With external control, we only run the
  # create invoice batch, and only when
  # the loadfactor is at least 10%
  threads 1 at rwl_run_batch
    for
      start erlang2(2.5*procnumber/ratefactor)
      every erlang2(2.5 / ratefactor)
      stop runperiod
    loop
      # release database;
      if xc_loadfactor > 0.1 then
	makeinvoices();
      end if;
      if xc_stopnow=1 or xc_stopnow=2 then
        break;
      end if;
    end loop;
  end threads;
$else
 $if !simulatebatch $then
  # This is the first batch, that does the ship_order
  # stuff which has high potential for TX contention
  # Note that we only run this in one process
  # but the TX contention comes from the occasional
  # execution of it via the non-batched doeither()
  threads !dontdo_batch1 and (procnumber=1) at rwl_run_batch
    for
      start erlang2(5.0)
      every 10.0 + erlang2(10.0 / ratefactor)
      stop runperiod
    loop
      ship_many_orders(5, 100 * proccount);
      wait 10; # always include an idle period
    end loop;
  end threads;

  # This the the second batch, that does
  # the complex query that has high CPU
  # consumption.  Typical
  # execution time is in the 1s range.
  threads !dontdo_batch2 and 1 at rwl_run_batch
    for
      start erlang2(0.5*procnumber/ratefactor) every erlang2(0.5 / ratefactor) stop runperiod
    loop
      complex_query();
    end loop;
  end threads;

  # This the the third batch, that emulates
  # stocking up a warehouse.  Typical actual 
  # execution time is in the 1s range.
  threads !dontdo_batch3 and 1 at rwl_run_batch
    for
      start erlang2(2.5*procnumber/ratefactor) every erlang2(2.5 / ratefactor) stop runperiod
    loop
      # release database;
      stockup();
    end loop;
  end threads;

  # This the the fourth batch, that emulates
  # creating invoices; typical 
  # execution time is in the 1s range.
  threads !dontdo_batch4 and 1 at rwl_run_batch
    for
      start erlang2(2.5*procnumber/ratefactor)
      every erlang2(2.5 / ratefactor)
      stop runperiod
    loop
      # release database;
      makeinvoices();
    end loop;
  end threads;

  # And here comes the long running stuff
  threads procnumber=1 and !dontdolong at rwl_run_batch
    for count 1 loop longpoolqry(); end loop;
  end threads;
  threads procnumber=1 and !dontdolong at rwl_run_batch
    for count 1 loop longpooldml(); end loop;
  end threads;
 $endif
  threads procnumber=1 and !dontdolong at rwl_run
    for count 1 loop longdedqry(); end loop;
  end threads;
  threads procnumber=1 and !dontdolong at rwl_run
    for count 1 loop longdeddml(); end loop;
  end threads;
$endif

  # Have a thread collecting own usr/sys
  threads 1 at rwloadsim
    double lastusr, lastsys, lastsec, thisusr, thissys, thissec;
    double usr,sys,sec;
    integer actpool := 0, actbatch := 0, openpool := 0;
    # note that you must create the table rwlcpu in the
    # repository schema using rwl_rwlcpu.sql
    sql insrwlcpu insert into rwlcpu(runnumber,procno,cliusr,clisys,second, num1, num2, num3)
    		   values (:1,:2,:3,:4,:5,:6,:7,:8);
      bind 1 runnumber, 2 procnumber, 3 usr, 4 sys, 5 thissec;
      bind 6 actpool, 7 actbatch, 8 openpool;
    end;
    showstart();
    getrusage; # Call is necessary to make usrseconds, sysseconds recent
    lastusr := usrseconds; lastsys:= sysseconds; lastsec := runseconds();
    wait 1;
    for
      every 1 stop runperiod+2
    loop
      getrusage;
      thisusr := usrseconds; thissys:= sysseconds; thissec := runseconds();
      usr:=(thisusr-lastusr)/(thissec-lastsec); sys:=(thissys-lastsys)/(thissec-lastsec);
      # Only get the active/open counts when pool is in use
      $if pool_type = "sessionpool" $then
      	actpool := activesessioncount(rwl_run_pool);
      	openpool := opensessioncount(rwl_run_pool);
      $endif
      $if batch_type = "sessionpool" and !simulatebatch $then
        actbatch := activesessioncount(rwl_run_batch);
      $endif
      $if pool_type = "connectionpool" $then
      	actpool := activesessioncount(rwl_run_cpool);
      	openpool := opensessioncount(rwl_run_cpool);
      $endif
      $if batch_type = "connectionpool" and !simulatebatch $then
        actbatch := activesessioncount(rwl_run_cbatch);
      $endif

      insrwlcpu; commit;
      lastusr := thisusr; lastsys:= thissys; lastsec :=thissec;
$if xc_enabled $then
      if xc_stopnow=1 or xc_stopnow=2 then break; end if;
$endif
    end loop;
  end;

end run;

execute at rwloadsim
  if procnumber=1 then
    update rwlrun
    set nattr2=2
    , sattr2='Finished, cleaning up'
    where runnumber=:runnumber;
    commit;
  end if;
end;

# Display something at the end of process 1
if procnumber = 1 then
  printline "Counts from process 1:";
  printline "Orders not shippped:", could_not_ship;
  printline "Orders shippped:", was_shipped;
  printline "Orders created:", orders_made;
  printline "Orders queried:", query_order_count, "items:", query_order_items;
  printline "Invoices made:", invoices_made;
  printline "Searches made:", searches_made|| ", found:", products_found;
  printline "Complex query count:", complex_count|| ", sum:", complex_sum;
  printline "Warehouse receives:", warehouse_received|| ", increased:", stock_increased|| ", added:", stock_added;
  printline "Artificial transactions:", aw_transactions_made;
end if;
