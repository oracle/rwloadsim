# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# bengsig  24-jan-2024 - Include batch pool counts in cli.csv
# bengsig  22-nov-2023 - Add --no-awr-interval
# bengsig  26-sep-2023 - Add timestamps to cli.csv
# bengsig   1-aug-2023 - Add oltpxcset markers from oltpxcrun
# bengsig  31-jul-2023 - Add experimental 24h simulation
# bengsig   8-may-2023 - Ash top 6->8 included
# bengsig  15-mar-2022 - Add complex query wait/exec time
# bengsig   1-nov-2022 - --no-awr should not cause error
# bengsig  25-oct-2022 - Add wait/exec times per second
# bengsig  15-sep-2022 - Use new file open syntax
# bengsig  13-sep-2022 - higher resolution in bcache/sharedp
# bengsig  01-sep-2022 - generate bcache.csv sharedp.csv
# bengsig  08-mar-2022 - Using fprint, sprintf
# bengsig  08-mar-2022 - Using implicit bind/define 
# bengsig  02-feb-2022 - Awr snapshot markers
# bengsig         2017 - Creation

$include:"parameters.rwl"
$include:"results.rwl"

integer runno := 0, oercount;
subdir:="/r" runno/1000 "/";

file plotfile, plotfil2;

string(1000) oerlist;
string(1000) oerheader;
string(1000) oerreverse;
string(1000) markerfile; $useroption:markerfile
private string starttime; $useroption:starttime
private string xcolor := "blue"; $useroption:xcolor
private integer no_awr_interval := 0; $userswitch:no-awr-interval

# This function takes a string that must be either
# in DDDD.MM.YYYY"T"HH24:MI:SS format or must be 
# a plain double and returns either the double itself
# or the number of seconds after starttime
function xseconds(string xtim) return double
  string tmatch;
  double retval := null;

  regex "([0-9]{4,4})\\.([0-9]{2,2})\\.([0-9]{2,2})T([0-9]{2,2}):([0-9]{2,2}):([0-9]{2,2})"
    , xtim, tmatch;
  if tmatch is not null then
    sql datediff
      begin
        :retval := (to_date(:tmatch,'YYYY.MM.DD"T"HH24:MI:SS')
	      -  to_date(:starttime,'YYYY.MM.DD"T"HH24:MI:SS')
	      ) * 86400;
      end;
      /
      bindout : retval;
      bind sql;
    end;
    datediff; rollback; # shut up RWL-046
  else
    regex "^[0-9]+(\\.[0-9]*)?$", xtim, retval;
  end if;

  if retval is null then
    writeline stderr, xtim " is not a positive double or in YYYY.MM.DD\"T\"HH24:MI:SS format";
    return null;
  end if;
  if retval < 0 or retval > runperiod then
    writeline stderr, retval " is outside the range [0;" runperiod "]";
    return null;
  end if;
  
  return retval;
end xseconds;

# generate the gnuplot files
execute at rwloadsim

  # Note that you could NOT create one query with
  # a join on second column of the various tables
  # as the actual values are with Âµs resolution.
  #
  # However, as the primary purpose of these csv
  # files are to provide input for gnuplot
  # this is fine.  


  double sumdbtime := 0.0, maxdbcpu := 0.0;
  integer countentries := 0;

  # Plot the database side time model data
  # Query to generate plot data for time model info
  # see timemodel.rwl for more information
  double second, dbcpu, dbtime, bgcpu, msping;
  sql seltimm_sql
    select second, val1 dbcpu, val2 dbtime, val3 bgcpu, val4 msping from sysres
    where runnumber=:runno
    and resname = 'TIMM'
    order by second
    /
    bind sql; 
    define sql;
    array 100;
  end;

  plotfile := resultsdir subdir runno "/dbtime.csv";
  writeline plotfile, "second dbcpu dbtime bgcpu msping";
  for seltimm_sql loop
    fprintf plotfile, "%.2f %.2f %.2f %.2f %.2f\n", second, dbcpu, dbtime, bgcpu, msping;
    if dbtime >= 0 then # exclude bogus data < 0
      sumdbtime += dbtime;
      countentries += 1;
    end if;
    if dbcpu > maxdbcpu then
      maxdbcpu := dbcpu;
    end if;
  end loop;
  
  plotfile := null;

  # modify and overwrite runperiod in env file
  if second < runperiod-60 then
    plotfile >>= resultsdir subdir runno "/env";
    fprintf plotfile, "runperiod=%d\n", second+10;
    plotfile := null;
    runperiod := second+10;
  end if;

  # set a few defaults for plots
  plotfile := resultsdir subdir runno "/header.plot";
  if second > 295 then
    writeline plotfile, "imgwidth=1024";
    writeline plotfile, "set key bottom left outside";
  else
    writeline plotfile, "imgwidth=640";
    writeline plotfile, "set key bottom left";
  end if;

  # Now handle the markers on the x-axis
  if markerfile != "" then
    string mtyp, mtim, mtxt;
    double msec;
    file mfil <= markerfile;
    for readline mfil,mtyp,mtim,mtxt loop
      msec := xseconds(mtim);
      if msec is not null then
        # Conversion OK, add gnuplot lines
	if mtyp = "m" then
	  writeline plotfile, 
	    "set label '" mtxt "' at " 
	    msec ", graph 0.12 rotate by 90 textcolor rgb '" xcolor "'";
	  writeline plotfile,
	    "set arrow from " msec ", graph 0.10 to "
	    msec ", graph -0.01 lw 2 lc rgb '" xcolor "' nohead";
	elseif mtyp = "l" then
	  writeline plotfile, 
	    "set label '" mtxt "' at " 
	    msec + runperiod/100.0 ", graph 0.98 right rotate by 90 textcolor rgb '" xcolor "'";
	  writeline plotfile,
	    "set arrow from " msec ", graph 1 to "
	    msec ", graph 0 lc rgb '" xcolor "' nohead";
	else
	  writeline stderr, "csvdata.rwl unexpected: " mtyp, mtim, mtxt;
	end if;
      end if;
    end loop;
    mfil := null;
  end if;

  # And deal with the awr gather periods
  double bb := 0, be := 0, eb := 0, ee := 0;
  sql qry_awrtim
    select val1 bb,val2 be,val3 eb,val4 ee
    from sysres
    where runnumber = :runno
    and resname = 'AWRTIM'
    /
    define sql;
    bind sql;
    ignoreerror;
  end;

  qry_awrtim;
  if oraerror then
    if oraerror != 1403 then
      writeline stderr, "csvdata.rwl: getting awr markers: " oraerrortext;
    end;
  elseif !no_awr_interval then
    writeline plotfile, "# awr markers:";
    writeline plotfile,
      "set arrow from " bb ", graph -0.01 to " be ", graph -0.01 lc rgb 'dark-red' heads size graph 0.005,90";
    writeline plotfile,
      "set arrow from " eb ", graph -0.01 to " ee ", graph -0.01 lc rgb 'dark-red' heads size graph 0.005,90";
  end if;


  # Did we create a file with markers for the injections?
  if s24hour and access(resultsdir subdir runno "/s24markers.plot","rf")
  then
    file s24markerfile <= resultsdir subdir runno "/s24markers.plot";
    string(1000) s24line;
    for readline s24markerfile, s24line loop
      writeline plotfile, s24line;
    end loop;
    s24markerfile := null;
  end if;

  plotfile := null;

  double maxyrange;
  # and a good y-axis for the normal res.plot
  plotfile := resultsdir subdir runno "/res.plot";
  if countentries and sumdbtime / countentries > 2.0 then
    maxyrange := 1.8 * sumdbtime / countentries;
    # make sure we at least can see 25% above maxcpu
    while 
      maxdbcpu*1.25 > maxyrange
    loop
      maxyrange := maxyrange * 1.25;
    end loop;
    fprintf plotfile, "set yrange [0:%.0f]\n", maxyrange;
  else
    writeline plotfile, "set yrange [0:4]";
  end if;
  plotfile := null;

  # and instance distribution
  # Query to generate plot data for instance distribution
  # see instdist.rwl for more information
  
  integer i1, i2, i3, i4, i5, i6, i7, i8;
  sql selinst_sql
    select val1 i1, val2 i2, val3 i3, val4 i4
    , val5 i5, val6 i6, val7 i7, val8 i8
    , second from sysres
    where runnumber=:runno
    and resname = 'INSTCNT'
    order by second
    /
    bind sql;
    define sql;
    array 100;
  end;

  plotfile := resultsdir subdir runno "/instdist.csv";
  writeline plotfile, "second i1 i2 i3 i4 i5 i6 i7 i8";
  for selinst_sql loop
    writeline plotfile, second, i1, i2, i3, i4, i5, i6, i7, i8;
  end loop;
  plotfile := null;

  # get the client side CPU stuff
  double cliusr, clisys;
  integer actpool, actbatch, openpool, openbatch;
  string tstamp;
  sql selcli	select c.second, c.cliusr, c.clisys
	      , c.num1 actpool, c.num2 actbatch, c.num3 openpool, c.num4 openbatch
	      , to_char(w.rdate+c.second/86400,'YYYY.MM.DD:HH24:MI:SS') tstamp
	      from rwlcpu_a c
	      join rwlrun w
	      on c.runnumber = w.runnumber
	      where w.runnumber=:runno
	      order by c.second;
    bind sql; define sql;
    array 100;
  end;

  # And get the counts of the procedures
  double val1, val2, val3, val4, val5, val6, val7, val8, val9, calf;
  sql seltps_sql
  select 
    nvl(make_order,0)
  , nvl(ship_order,0)
  , nvl(make_invoices,0)
  , nvl(search_products,0)
  , nvl(complex_query,0)
  , nvl(stockup,0)
  , nvl(aw_transaction,0)
  , nvl(query_order,0)
  , nvl(awindex_query,0)
  , second
  , nvl(call_failure,0)
  from 
  ( select vname, second, scount 
    from
    persec_a
    where runnumber=:1
  )
  pivot (sum(nvl(scount,0)) for vname in 
  ( 'make_order' as make_order
  , 'ship_order' as ship_order
  , 'make_invoices' as make_invoices
  , 'search_products' as search_products
  , 'complex_query' as complex_query
  , 'stockup' as stockup
  , 'aw_transaction' as aw_transaction
  , 'awindex_query' as awindex_query
  , 'call_failure' as call_failure
  , 'query_order' as query_order )
  )
  order by second
  /
    bind 1 runno;
    define 1 val1, 2 val2, 3 val3;
    define 4 val4, 5 val5, 6 val6, 7 val7;
    define 8 val8;
    define 9 val9;
    define 10 second;
    define 11 calf;
    array 100;
  end;

  integer maxactpool := 0; # Keep track of highest ever

  # Create the CPU plot file
  plotfile := resultsdir subdir runno "/cli.csv";
  writeline plotfile, "sec cliusr clisys, actpool, actbatch, openpool, openbatch, yyyy.mm.dd:hh24:mi:ss";
  for selcli loop
    fprintf plotfile, "%.2f %.3f %.3f %d %d %d %d %s\n"
      , second, cliusr, clisys, actpool, actbatch, openpool, openbatch, tstamp;
    if actpool > maxactpool then
      maxactpool := actpool;
    end if;
  end loop;
  plotfile := null;

  # generate bcache, sharedp
  plotfile := resultsdir subdir runno "/bcache.csv";
  plotfil2 := resultsdir subdir runno "/sharedp.csv";
  writeline plotfile, "#sec i1 i2 i3 i4 i5 i6 i7 i8";
  writeline plotfil2, "#sec i1 i2 i3 i4 i5 i6 i7 i8";
  string resname;
  for
    select resname, second
    -- the negative values prevent gnuplot 
    -- from showing anything
    , nvl(val1,-1e4)/1024 val1
    , nvl(val2,-1e4)/1024 val2
    , nvl(val3,-1e4)/1024 val3
    , nvl(val4,-1e4)/1024 val4
    , nvl(val5,-1e4)/1024 val5
    , nvl(val6,-1e4)/1024 val6
    , nvl(val7,-1e4)/1024 val7
    , nvl(val8,-1e4)/1024 val8
    from sysres where runnumber = :runno
    and resname in ('BCACHE','SHAREDP')
    order by second, resname
    /
  loop
    if resname = "BCACHE" then
      fprintf plotfile, "%.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f\n"
      , second, val1, val2, val3, val4, val5, val6, val7, val8;
    else
      fprintf plotfil2, "%.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f %.3f\n"
      , second, val1, val2, val3, val4, val5, val6, val7, val8;
    end if;
  end loop;

  plotfile := null;
  plotfil2 := null;
    
  double wmean, wmeantot := 0.0;
  integer wmcount := 0;
  # And the througput plot file
  # Note that for runtype = 1 or 4 (the full oltp workload), the wmean value is a weighted mean of the 
  # throughput of the individual transactions.  This figure is only a measure of performance, the absolute
  # value does not in itself have a meaning, and the weights below in the calulation could in principle
  # be chosen differently.  The only "meaning" is the the different transactions have some "business value"
  # Update 21-oct:  We now change this to simply be the sum of make_order, query_order, search_products,
  # complex_query, aw_transaction so that it matches what we provide to hawkeye
  # For runtype 2 and 3 (the network chatty tests), the wmean
  # value really is the same as the absolute number of "query order" transactions.
  plotfile := resultsdir subdir runno "/tps.csv";
  writeline plotfile, "sec wmean make_order ship_order make_invoices search_products complex_query stockup aw_transaction query_order awindex_query failures";
  for seltps_sql loop
      wmean :=
	      val1     # make_order
	    #+ val2 * 5 # ship_order
	    #+ val3 * 5 # make_invoices
	    + val4 # * 4 # search_products
	    + val5 # * 2 # complex_query
	    # + val6 * 5 # stock_up
	    + val7     # aw_transaction
	    + val8     # query_order
	    + val9     # awindex_query
		;
      if wmean >0.0 then
	# avoid including wrong values in average
	wmeantot += wmean;
	wmcount += 1;
      end if;

      fprintf plotfile
      , "%.2f %.1f %.1f %.1f %.1f %.1f %.1f %.1f %.1f %.1f %.1f %.1f\n"
      , second
      , wmean
      , val1, val2, val3, val4, val5, val6, val7, val8, val9, calf;
  end loop;
  plotfile := null;
  double wmavg, wma10;
  wmavg := 2.0 * wmeantot / wmcount;
  # get about two significant digits of double the average
  wma10 := 2.0*exp(10,round(log(10,wmavg)-1.5));
  plotfile := resultsdir subdir runno "/tps.y2range";
  if s24hour then
    writeline plotfile, "set y2range [0:*]";
  else
    writeline plotfile, "set y2range [0:", round(wmavg/wma10)*wma10,"]";
  end;
  plotfile := null;

  # Now do the wait and exec times per second
  double mo_wait, mo_exec, mi_wait, mi_exec, sp_wait, sp_exec, cq_exec;
  double aw_wait, aw_exec, qo_wait, qo_exec, ai_wait, ai_exec, cq_wait;

  plotfile := resultsdir subdir runno "/waitexec.csv";
  writeline plotfile, "sec mo_wait mo_exec mi_wait mi_exec sp_wait sp_exec aw_wait aw_exec qo_wait qo_exec ai_wait ai_exec";
  for 
    select
      second
    , nvl(make_order_avgw,0) mo_wait , nvl(make_order_avge,0) mo_exec
    , nvl(make_invoices_avgw,0) mi_wait , nvl(make_invoices_avge,0) mi_exec
    , nvl(search_products_avgw,0) sp_wait , nvl(search_products_avge,0) sp_exec
    , nvl(aw_transaction_avgw,0) aw_wait , nvl(aw_transaction_avge,0) aw_exec
    , nvl(query_order_avgw,0) qo_wait , nvl(query_order_avge,0) qo_exec
    , nvl(awindex_query_avgw,0) ai_wait , nvl(awindex_query_avge,0) ai_exec
    , nvl(complex_query_avgw,0) cq_wait , nvl(complex_query_avge,0) cq_exec
    from
    ( select vname, second
      , case when scount > 0 then wtime/scount else 0 end wtime
      , case when scount > 0 then etime/scount else 0 end etime
      from
      persec_a
      where runnumber=:runno
    )
    pivot 
    ( avg(nvl(wtime,0)) avgw
    , avg(nvl(etime,0)) avge 
    for vname in
    ( 'make_order' as make_order
    , 'make_invoices' as make_invoices
    , 'search_products' as search_products
    , 'complex_query' as complex_query
    , 'aw_transaction' as aw_transaction
    , 'awindex_query' as awindex_query
    , 'query_order' as query_order )
    )
    order by second
    /
  loop
    fprintf plotfile
    , "%.2f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f %.5f\n"
    , second
    , mo_wait, mo_exec, mi_wait, mi_exec, sp_wait, sp_exec
    , aw_wait, aw_exec, qo_wait, qo_exec, ai_wait, ai_exec, cq_wait, cq_exec;
  end loop;
  plotfile := null;
  # now handle the oer plot by creating two dynamic SQL
  # statements for respectively the csv generation and
  # the html table generation
  # Find the at most 8 most common errors
  string(1000) nvlstring;
  string(10000) oerrow;
  string(1000) pivotstring;
  string soer; 
  integer ioer;
  integer notused;

  sql seloercnt 
    select to_char(oer,'FM09999'), count(*) from 
    oerstats
    where runnumber = :1
    --and oer not in (1400)
    --having min(second) <= :2 NOT WORKING
    group by oer
    order by count(*) desc
    /
    define 1 soer, 2 notused;
    # bind 2 runperiod;
    bind 1 runno;
    array 9;
  end;

  # and create the SQL pieces used for
  # respectively the OER html table and OER csv pivot
  oerheader := "";
  oercount := 0;
  for seloercnt loop
    ioer := 0+soer ; # integer representation 
    oerheader := "<th>ORA-" soer "</th>" oerheader;
    if oercount then
      oerlist ||= " " ioer;
      oerreverse := ioer " " oerreverse;
      pivotstring ||= ", ";
    else
      oerlist := ioer;
      oerreverse := ioer;
      pivotstring := "(";
    end if;
    oerrow := " || '<td align=\"right\">' || to_char(nvl(c" soer ",0))||'</td>'" oerrow; 
    nvlstring := " || ' ' || to_char(nvl(c" soer ",0))" nvlstring; 
    pivotstring ||= soer " as c" soer;
    oercount += 1;
  end loop;
  pivotstring ||= ")";

  # Now generate the SQL to create the oer pivot
  # This and the next will be wrong sql if there are no errors
  # but we only really execute it when errors are found
  string(10000) oerpivotsql;
  oerpivotsql := "select second ";
  oerpivotsql ||= nvlstring;
  oerpivotsql ||= " from (";
  oerpivotsql ||= " select oer,round(second) second, count(*) cnt";
  oerpivotsql ||= " from oerstats";
  oerpivotsql ||= " where runnumber=:1";
  oerpivotsql ||= " group by oer, round(second))";
  oerpivotsql ||= " pivot ( sum(cnt) for oer in ";
  oerpivotsql ||= pivotstring ") order by second";
  
  # Now generate the SQL to create the oer html table
  string(10000) oertablesql;
  oertablesql := "select '<tr><td align=\"right\">' || second || '</td>'";
  oertablesql ||= oerrow  "|| '</tr>'";
  oertablesql ||= " from (";
  oertablesql ||= " select oer,round(second) second, count(*) cnt";
  oertablesql ||= " from oerstats";
  oertablesql ||= " where runnumber=:1";
  oertablesql ||= " group by oer, round(second))";
  oertablesql ||= " pivot ( sum(cnt) for oer in ";
  oertablesql ||= pivotstring ") order by second";

  # create the shell variables we need to do the plot
  plotfile := resultsdir subdir runno "/oerashvars.sh";
  fprintf plotfile, "oerlist='%s'\n",oerlist;
  fprintf plotfile, "oercount='%d'\n",oercount;
  plotfile := null;

  string(1000) csvline;
  string(5000) plotline;

  # create the ash csv file

  double ashcpu;

  integer esum;
  integer maxesum := 0;

  sql ashcsv
    select second||' '||cpu||' '
    ||e1||' '
    ||e2||' '
    ||e3||' '
    ||e4||' '
    ||e5||' '
    ||e6||' '
    ||e7||' '
    ||e8||' '
    ||other||' '
    , cpu
    , e1+e2+e3+e4+e5+e6+e7+e8 esum
    from ashdata 
    where runnumber = :1
    order by second
    /
    bind 1 runno;
    define 1 csvline;
    define 2 ashcpu, 3 esum;
    array 100;
  end;

  string event;

  # The data in this table, i.e. the event names
  # matching E1 .. E8 comes from ashstep1.rwl
  # We use this query both to write a comment
  # to the csv file such that a human will know
  # which events E1 .. E8 are, and to assemble
  # the plotline for gnuplot
  sql ashevents
    select '# '||to_char(enum+2,'FM99')||': '||ename
    , ename
    from rwlash
    where runnumber = :1
    order by enum;
    bind 1 runno;
    define 1 csvline, 2 event;
    array 10;
  end;
    
  plotfile := resultsdir subdir runno "/ash.csv";
  # first write the comments for human use
  # and at the same time create the actual plot command for gnuplot
  # which must be done here so the En numbers match the real event
  # names
  integer d, lc:=1;
  writeline plotfile, "# columns are\n# 1: second\n# 2: CPU";
  sprintf plotline,  "plot '%s%s%d/ash.csv' using 1:($2+$3+$4+$5+$6+$7+$8+$9+$10+$11) with boxes lc rgb 'gray' title 'Other'\\\n"
    , resultsdir,subdir,runno ;
  for ashevents loop
    writeline plotfile, csvline; # Write comment to csv file for human understanding
    sprintf || plotline,  ", '%s%s%d/ash.csv' using 1:($2"
    , resultsdir,subdir,runno; 
    for d:= lc..8 loop
      sprintf || plotline , "+$%d",d+2;
    end loop;
    plotline ||= ") with boxes lc rgb '";
    # if there is resmgr:cpu quantum, make it bright green
    if event = "resmgr:cpu quantum" then
      plotline ||= "green";
    else
      # otherwise
      # well rwloadsim needs a switch or an array type.....
      if lc=1 then plotline ||= "purple"; end if;
      if lc=2 then plotline ||= "red"; end if;
      if lc=3 then plotline ||= "orange"; end if;
      if lc=4 then plotline ||= "blue"; end if;
      if lc=5 then plotline ||= "light-blue"; end if;
      if lc=6 then plotline ||= "salmon"; end if;
      if lc=7 then plotline ||= "gold"; end if;
      if lc=8 then plotline ||= "cyan"; end if;
    end if;
    plotline ||= "' title '" event "' \\\n";
    lc += 1;
  end loop;
  writeline plotfile, "# 11: Other";
  # note that CPU always gets a somewhat darker green
  plotline ||= ", '"  resultsdir subdir runno  "/ash.csv' using 1:2 with boxes lc rgb 'forest-green' title 'CPU'";

  integer ashcsvcount := 0;
  double totashcpu := 0;
  integer highcount := 0; # See if there are many with extreme counts

  # Now write the real data columns to the csv file
  for ashcsv loop
    writeline plotfile, csvline;
    if ashcpu > 0 then
      totashcpu += ashcpu;
    end if;
    if esum + ashcpu > maxesum then
      maxesum := esum + ashcpu ;
    end if;

    # maxactpool is 0 if not using session pool, so use a different
    # criteria for what "high" means
    if maxactpool = 0 then
      if esum > 5 * ashcpu then
	# Kind of arbitrary that waits > 5*cpu means high
        highcount += 1;
      end if;
    else
      if esum > maxactpool then
	# count how many periods are very high
	highcount += 1;
      end if;
    end if;
    ashcsvcount+= 1;
  end loop;
  plotfile := null;

  # Add the count of entries to oerashvars.sh such that 
  # runplot.sh later can avoid calling gnuplot if it
  # doesn't make sense
  plotfile >>= resultsdir subdir runno "/oerashvars.sh";
  if ashcsvcount>2 then
    fprintf plotfile, "ashcsvcount='%d'\n",ashcsvcount;
  else
    writeline plotfile, "ashcsvcount=0";
  end if;
  plotfile := null;


  maxyrange := null;
  # Create a file that contains nothing but the plot line
  # runplot.sh will later create the full input for gnuplot
  plotfile := resultsdir subdir runno "/ashplotline.txt";
  if ashcsvcount>10 then
    if highcount > 200 then
      # Very many are very high, let gnuplot decide 
      # so true max is shown
      writeline plotfile, "set yrange [0:*]";
    else
      if highcount > 100 then
	# Allow for some high 
	maxyrange := 0.75 * maxesum;
      else
        # Few very high, set cpu at 10% to see some others
	maxyrange := 10.0 * totashcpu/ashcsvcount;
	# but never above maxesum+1
	if maxyrange > maxesum then
	  maxyrange := maxesum+1;
	end if;
      end if;
      fprintf plotfile, "set yrange [0:%.0f]\n", maxyrange;
    end if;
  else
    writeline plotfile, "set yrange [0:*]";
  end if;
  writeline plotfile, plotline;
  plotfile := null;

  plotfile >>= resultsdir subdir runno "/oerashvars.sh";
  if maxyrange is not null and maxesum > maxyrange then
    fprintf plotfile,"ashnotice=' (max %d off scale)'\n", maxesum;
  else
    writeline plotfile, "ashnotice=''";
  end if;
  plotfile := null;

  if oercount then

    # Dyanmic SQL with fixed bind/define
    sql oerpivot 
      bind 1 runno;
      define 1 csvline;
      array 9;
    end;

    modify sql oerpivot for oerpivotsql;

    # create the csv of error counts
    plotfile := resultsdir subdir runno "/oerpivot.csv";
    writeline plotfile, "# sec " oerreverse;
    for oerpivot loop
      writeline plotfile, csvline;
    end loop;
    plotfile := null;

    string(10000) htmlline;

    # Dyanmic SQL with fixed bind/define
    sql oertable
      bind 1 runno;
      define 1 htmlline;
      array 9;
    end;

    modify sql oertable for oertablesql;

    # create the html table of error counts
    plotfile := resultsdir subdir runno "/oertable.html";
    writeline plotfile, "<table>";
    writeline plotfile, "<tr><th>second</th>" oerheader;
    for oertable loop
      writeline plotfile, htmlline;
    end loop;
    writeline plotfile, "</table>";
    plotfile := null;


  end if;
end execute;
