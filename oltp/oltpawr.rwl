# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# oltpawr.rwl Code used to create awr snapshots and write awr reports
#
# History
#
# bengsig  23-jan-2024 - fflush some messages
# bengsig  18-jan-2024 - global awr
# bengsig  15-sep-2022 - Use new file open syntax
# bengsig  10-may-2022 - rename awr.rwl to oltpawr.rwl
# bengsig  02-feb-2022 - Awr snapshot markers
# bengsig  29-apr-2021 - awr creation done after run
# bengsig  31-mar-2021 - Make sure default awr is for most busy instance
# bengsig         2017 - Creation


integer dbid, instnum, snap, begsnap, endsnap;
file awrout; 

integer awrmode := 1; # 0:text, 1:html

# Declare a PL/SQL block that will get dbid and instance
# and do an awr snapshot
sql begawrsql
begin 
  select decode(con_dbid,dbid,dbid,con_dbid)
  , sys_context('USERENV','INSTANCE')
  into :b1, :b2
  from v$database;
  :b3 := dbms_workload_repository.create_snapshot;
end;
/
bindout 1 dbid, 2 instnum, 3 begsnap;
end;

# create the end awr snapshot
sql endawrsql
begin 
  :endsnap := dbms_workload_repository.create_snapshot;
end;
/
bindout 1 endsnap;
end;

# Disable bloom filter to get around awr problem
sql disable_bloom
  alter session set "_bloom_pruning_enabled" = false;
  ignoreerror; # As some ATP databases disallow alter session
end;

# create a variable that will hold one line being produced
# by dbms_workload_repository.awr_report_xxx
string(20000) awrline;

# And declare the query that actually does the text fetch
sql getawrtext
select * from table(dbms_workload_repository.awr_report_text(:1,:2,:3,:4));
array 100; 
bind 1 dbid, 2 instnum, 3 begsnap, 4 endsnap; 
define 1 awrline; 
end;

# And declare the query that actually does the html fetch
sql getawrhtml
select * from table(dbms_workload_repository.awr_report_html(:1,:2,:3,:4));
array 100; 
bind 1 dbid, 2 instnum, 3 begsnap, 4 endsnap; 
define 1 awrline; 
end;

# And declare the query that does the global awr
sql getawrglobal
select * from table(dbms_workload_repository.awr_global_report_html(:1,'',:2,:3));
array 100; 
bind 1 dbid, 2 begsnap, 3 endsnap; 
define 1 awrline; 
end;

string(2000) htmlxtra;
integer htmlxtrawrap;

# Declare a procedure that does the begin snapshort
procedure beginawr() nostatistics
  begawrsql; # generate snapshot
  commit;
  printline "gathered awr begin snapshot for dbid:" dbid 
    " inst:" instnum " snapshot:" begsnap;
end;

# And one that does the end snapshot
procedure endawr() nostatistics
  endawrsql; # generate snapshot
  commit;
  printline "gathered awr end snapshot for dbid:" dbid 
    " inst:" instnum " snapshot:" endsnap;

  file awrinfo;
  awrinfo := resultsdir subdir runnumber "/awrinfo.txt";
  writeline awrinfo, dbid " " begsnap " " endsnap;
  awrinfo := null;
end;

  
# Declare a procedure that creates the awr
# If runno is provided, it means we need to
# open the awrinfo file to get snapids and dbid
procedure generateawr(integer runno) nostatistics
  if runno is not null then
    # This is called separately, so read these values
    file awrinfo;
    awrinfo <= resultsdir subdir runno "/awrinfo.txt";
    readline awrinfo,dbid, begsnap, endsnap;
    awrinfo := null;
  else
    runno := runnumber;
  end if;
  disable_bloom;

  # Get our preferred instance
  # Note that this is executed against the repository
  integer prefinst;
  sql get_pref_inst
    select instance
    from
    (select second, val1, val2, val3, val4, val5, val6, val7, val8
    from sysres where runnumber=:1
    and resname = 'INSTCNT')
    unpivot (val
    for instance
    in (val1 as 1, val2 as 2, val3 as 3, val4 as 4
    , val5 as 5, val6 as 6, val7 as 7, val8 as 8)
    )
    group by instance
    order by sum(val) desc, instance
    /
    define 1 prefinst;
    bind 1 runno;
    array 2;
  end;

  # List all open instances with preferred first
  sql instlist
    select instance_number from gv$instance
    order by decode(instance_number,:1,1,2),instance_number;
    define 1 instnum;
    bind 1 prefinst;
    array 9;
  end;


  # Make sure the "naked" html file name is for
  # the instance with highest use
  for get_pref_inst at rwloadsim and prefinst is null loop
    null; # Just get the first not null row
  end loop;

  printline "making awr for db:" dbid " inst:" prefinst
    " snaps:" begsnap "-" endsnap; 
  fflush stdout;
  if awrmode = 0 then
    # text
    awrout := awrdirectory  subdir runno "/"  runno
      "_awr_" instnum "_" begsnap "_" endsnap ".txt";
    for getawrtext loop
      writeline awrout, awrline;
    end;
    awrout := null; # this closes the file
  else
    # html
    htmlxtra := "";
    htmlxtrawrap := 0;
    for instlist loop
      if prefinst is null or prefinst = instnum then 
	# The default, use traditional ("naked") name
	awrout := awrdirectory  subdir runno "/"  runno
	  "_awr.html";
      else
	# For the others, use name with instance number
	printline "making extra awr for db:" dbid " inst:" instnum
	  " snaps:" begsnap "-" endsnap; 
	awrout := awrdirectory  subdir runno "/"  runno
	  "_" instnum "_awr.html";
	fflush stdout;
	htmlxtrawrap += 1;
	if !(htmlxtrawrap % 3) then
	  htmlxtra ||= "</tr>\n<tr><td>   </td>";
	end if;
	htmlxtra ||= "<td><a href=\"" runno "_" instnum "_awr.html\">"
	  runno "_" instnum "_awr.html</td> ";
      end if;
	
      for getawrhtml loop
	writeline awrout, awrline;
      end;
      awrout := null; # this closes the file
    end loop;
    if globalawr then
      printline "making global awr for db:" dbid 
	" snaps:" begsnap "-" endsnap; 
      awrout := awrdirectory subdir runno "/" runno "_global_awr.html";
      fflush stdout;
      htmlxtrawrap += 1;
      if !(htmlxtrawrap % 3) then
	htmlxtra ||= "</tr>\n<tr><td>   </td>";
      end if;
      htmlxtra ||= "<td><a href=\"" runno "_global_awr.html\">"
	runno "_global_awr.html</td> ";
	
      for getawrglobal loop
	writeline awrout, awrline;
      end;
      awrout := null; # this closes the file
    end if;
    awrout:= resultsdir subdir runno "/xtraawrs.txt";
    writeline awrout, htmlxtra;
    awrout := null;
  end;
end;

# This is the old interface executed directly from runsys.rwl
procedure makeawr()
  endawr();
  generateawr(null);
end;

procedure awrtim_save(double bb, double be, double eb, double ee) nostatistics

  double savtim := runseconds();

  sql ins_awrtim
    insert into sysres
    (val1, val2, val3, val4, runnumber, second, resname)
    values (:bb, :be, :eb, :ee, :runnumber, :savtim, 'AWRTIM')
    /
    bind ":bb" bb, ":be" be;
    bind ":eb" eb, ":ee" ee;
    bind ":runnumber" runnumber, ":savtim" savtim;
    array 1;
  end;

  ins_awrtim;
  commit;
end;

