# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# History
#
# bengsig  29-apr-2024 - osstat
# bengsig   7-aug-2023 - Exclude negative dbcpu, dbtime
# bengsig         2019 - Creation

# Prepare timemodel data from the database 
# under load

# You need to have a database created with the
# name 'systemdb' which connects to the database under
# load as DBA and therefore can read v$sys_time_model
# Note that 'systemdb' must be using a sessionpool
# although it can safely be very small e.g. 1..2
# 

# When using this, an initial query against
# gv$sys_time_model will be executed, you should then
# execute the procedure timemodel_save() as the 
# repository database user every 1 second.

# Note that you need an extra table in your repository,
# sysres, which is created using the rwl_sysres.sql
# script.  

# Note that the sysres table has more columns
# than currently used by this script, to allow
# for further data to be saved from other gv$ views

# variables to store results from v$sys_time_model query
private string t_name;
private double t_val;
private string t_dbsystim;

# variable for terminal distribution
private integer thisterm, otherterm;

integer onrac:=1; # set to zero will mean v$time_model is used

# Get data from v$sys_time_model
private sql t_query
  select stat_name, value, to_char(systimestamp,'SSSSS.FF6') from
  ( select stat_name, sum(value) value
    from v$sys_time_model
    where stat_name in 
    ('DB CPU'
    ,'background cpu time'
    ,'DB time'
    )
    group by stat_name
  )
  /
  array 3;
  define 1 t_name, 2 t_val, 3 t_dbsystim;
end;

private sql termdist_query
  select
    sum(decode(terminal,sys_context('USERENV','TERMINAL'),1,0))
    , count(*)
  from v$session 
  where username like upper(:1)
  /
  define 1 thisterm, 2 otherterm;
  bind 1 rwl_run_like;
end;

# Get data from gv$sys_time_model
private sql t_query_gv
  select stat_name, value, to_char(systimestamp,'SSSSS.FF6') from
  ( select stat_name, sum(value) value
    from gv$sys_time_model
    where stat_name in 
    ('DB CPU'
    ,'background cpu time'
    ,'DB time'
    )
    group by stat_name
  )
  /
  array 3;
  define 1 t_name, 2 t_val, 3 t_dbsystim;
end;

private sql termdist_query_gv
  select
    sum(decode(terminal,sys_context('USERENV','TERMINAL'),1,0))
    , count(*)
  from gv$session 
  where username like upper(:1)
  /
  define 1 thisterm, 2 otherterm;
  bind 1 rwl_run_like;
end;

private integer one;

private sql t_pingqry
  select 1 from dual;
  array 1;
  define 1 one;
end;

# variables to store current and previous results
private double dbcpu := 0, prvdbcpu;
private double dbtim := 0, prvdbtim;
private double bgcpu := 0, prvbgcpu;
private double cliaft, clibef, secnow := 0, secprv, msping, pingbegt;

private integer resok := 1;
# Run query against the DBA to get various time
# model data
private procedure timemodel_getres() nostatistics
  # save previous
  prvdbcpu := dbcpu;
  prvdbtim := dbtim;
  prvbgcpu := bgcpu;
  secprv := secnow;
  resok := 1; # assume data are good

  double qrysec;

  t_pingqry; # Load all memory, maybe soft parse, etc
  pingbegt := runseconds();
  t_pingqry;
  clibef := runseconds();
  msping := 1000 * (clibef-pingbegt);
  # run the query and save new values
  if onrac then
    termdist_query_gv;
    for t_query_gv loop
      if t_name = "DB CPU" then
        if t_val < prvdbcpu then
	  # bogus data
	  resok := 0;
	else
	  dbcpu := t_val;
	end if;
	# get the timestamp from the line with db cpu
	qrysec := t_dbsystim;
      else
	if t_name = "DB time" then
	  if t_val < prvdbtim then
	    resok := 0;
	  else
	    dbtim := t_val;
	  end if;
	else
	  # We allow bogus bg cpu as we 
	  # are not using it for graphs
	    bgcpu := t_val;
	end;
      end;
    end;
  else
    termdist_query;
    for t_query loop
      if t_name = "DB CPU" then
        if t_val < prvdbcpu then
	  # bogus data
	  resok := 0;
	else
	  dbcpu := t_val;
	end if;
	# get the timestamp from the line with db cpu
	qrysec := t_dbsystim;
      else
	if t_name = "DB time" then
	  if t_val < prvdbtim then
	    resok := 0;
	  else
	    dbtim := t_val;
	  end if;
	else
	  if t_val < prvbgcpu then
	    resok := 0;
	  else
	    bgcpu := t_val;
	  end if;
	end;
      end;
    end;
  end if;
  cliaft := runseconds();
  if resok then
    secnow := qrysec;
  end if;
end;

# execute once initially to get first set of values
timemodel_getres() at systemdb;

private double usr1:=0, usr2:=0, usr3:=0, usr4:=0, usr5:=0, usr6:=0, usr7:=0, usr8:=0;
private double sys1:=0, sys2:=0, sys3:=0, sys4:=0, sys5:=0, sys6:=0, sys7:=0, sys8:=0;
private double pusr1, pusr2, pusr3, pusr4, pusr5, pusr6, pusr7, pusr8;
private double psys1, psys2, psys3, psys4, psys5, psys6, psys7, psys8;
private double usrsystim := runseconds(), pusrsystim;

private procedure osstat_getres()
  pusr1 := usr1; pusr2 := usr2; pusr3 := usr3; pusr4 := usr4;
  pusr5 := usr5; pusr6 := usr6; pusr7 := usr7; pusr8 := usr8;
  psys1 := sys1; psys2 := sys2; psys3 := sys3; psys4 := sys4;
  psys5 := sys5; psys6 := sys6; psys7 := sys7; psys8 := sys8;
  pusrsystim := usrsystim;
  usrsystim := runseconds();

  select 
    nvl(usr1,0) usr1 , nvl(usr2,0) usr2 , nvl(usr3,0) usr3 , nvl(usr4,0) usr4
  , nvl(usr5,0) usr5 , nvl(usr6,0) usr6 , nvl(usr8,0) usr7 , nvl(usr8,0) usr8
  , nvl(sys1,0) sys1 , nvl(sys2,0) sys2 , nvl(sys3,0) sys3 , nvl(sys4,0) sys4
  , nvl(sys5,0) sys5 , nvl(sys6,0) sys6 , nvl(sys8,0) sys7 , nvl(sys8,0) sys8
  from
  (
    (
    select inst_id, stat_name, value/100 cpuseconds
    from gv$osstat
    where stat_name in ('SYS_TIME','USER_TIME')
    and inst_id <= 8 and con_id = 0
    )
  pivot (sum(cpuseconds)
  for
    (inst_id, stat_name) in
      ( (1,'SYS_TIME') as sys1 , (2,'SYS_TIME') as sys2 , (3,'SYS_TIME') as sys3 , (4,'SYS_TIME') as sys4
      , (5,'SYS_TIME') as sys5 , (6,'SYS_TIME') as sys6 , (7,'SYS_TIME') as sys7 , (8,'SYS_TIME') as sys8
      , (1,'USER_TIME') as usr1 , (2,'USER_TIME') as usr2 , (3,'USER_TIME') as usr3 , (4,'USER_TIME') as usr4
      , (5,'USER_TIME') as usr5 , (6,'USER_TIME') as usr6 , (7,'USER_TIME') as usr7 , (8,'USER_TIME') as usr8
      )
    )
  )
  /
end osstat_getres;

if doosstat then
  osstat_getres() at systemdb;
end if;

# insert into osstat
procedure osstat_save() nostatistics
  double iusr1, iusr2, iusr3, iusr4, iusr5, iusr6, iusr7, iusr8;
  double isys1, isys2, isys3, isys4, isys5, isys6, isys7, isys8;
  double ustsdif;
  osstat_getres() at systemdb;

  ustsdif := usrsystim - pusrsystim;
  if ustsdif > 0 then
    iusr1 := (usr1-pusr1)/ustsdif; iusr2 := (usr2-pusr2)/ustsdif;
    iusr3 := (usr3-pusr3)/ustsdif; iusr4 := (usr4-pusr4)/ustsdif;
    iusr5 := (usr5-pusr5)/ustsdif; iusr6 := (usr6-pusr6)/ustsdif;
    iusr7 := (usr7-pusr7)/ustsdif; iusr8 := (usr8-pusr8)/ustsdif;
    isys1 := (sys1-psys1)/ustsdif; isys2 := (sys2-psys2)/ustsdif;
    isys3 := (sys3-psys3)/ustsdif; isys4 := (sys4-psys4)/ustsdif;
    isys5 := (sys5-psys5)/ustsdif; isys6 := (sys6-psys6)/ustsdif;
    isys7 := (sys7-psys7)/ustsdif; isys8 := (sys8-psys8)/ustsdif;

    if 
      iusr1>=0 and
      iusr2>=0 and
      iusr3>=0 and
      iusr4>=0 and
      iusr5>=0 and
      iusr6>=0 and
      iusr7>=0 and
      iusr8>=0 and
      isys1>=0 and
      isys2>=0 and
      isys3>=0 and
      isys4>=0 and
      isys5>=0 and
      isys6>=0 and
      isys7>=0 and
      isys8>=0
    then
      insert into osstat
	(runnumber, second
	, usr1, usr2, usr3, usr4
	, usr5, usr6, usr7, usr8
	, sys1, sys2, sys3, sys4
	, sys5, sys6, sys7, sys8
	)
      values
	( :runnumber, :usrsystim
	, :iusr1, :iusr2, :iusr3, :iusr4
	, :iusr5, :iusr6, :iusr7, :iusr8
	, :isys1, :isys2, :isys3, :isys4
	, :isys5, :isys6, :isys7, :isys8
	)
      /
      commit;
    end if;
  end if;
end osstat_save;

# insert values into the repository database
# call this once per second as a thread in
# your "run" command.  Note that if using
# multiple processes (-M/-P/-R flags),
# you need to make sure only one process does this
procedure timemodel_save() nostatistics
  # variables for insert
  double t_val1, t_val2, t_val3, termdist;

  # note that the sysres table isn't found by default
  # in the repository schema but is created using
  # rwl_sysres.sql 
  sql timemodel_insert
    insert into sysres
    (runnumber, second, resname, val1, val2, val3, val4, val5, val6, val7)
    values (:1, :2, 'TIMM', :3/1e6, :4/1e6, :5/1e6, :6, :7, :8, :9)
    /
    bind 1 runnumber, 2 pingbegt;
    bind 3 t_val1, 4 t_val2, 5 t_val3, 6 msping;
    bind 7 termdist;
    bind 8 dbcpu, 9 dbtim;
    array 1;
  end;

  timemodel_getres() at systemdb;
  termdist := otherterm ? 1.0*thisterm/otherterm : 1.0;
  if resok then
    t_val1 := (dbcpu-prvdbcpu)
      /(secnow-secprv);
    t_val2 := (dbtim-prvdbtim)
      /(secnow-secprv);
    t_val3 := (bgcpu-prvbgcpu)
      /(secnow-secprv);
  end if;
  # This test ensures reasonable values and in particular that
  # the second over midnight
  # doesn't appear extremely negative
  if secnow-secprv >= 0.5 and resok then
    timemodel_insert;
    commit;
  end if;
end;

