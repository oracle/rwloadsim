# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# History
#
# bengsig   7-aug-2023 - Exclude negative dbcpu, dbtime
# bengsig         2019 - Creation

# Prepare timemodel data from the database 
# under load

# You need to have a database created with the
# name 'systemdb' which connects to the database under
# load as DBA and therefore can read v$sys_time_model
# Note that 'systemdb' must be using a sessionpool
# although it can safely be very small e.g. 1..2
# 

# When using this, an initial query against
# gv$sys_time_model will be executed, you should then
# execute the procedure timemodel_save() as the 
# repository database user every 1 second.

# Note that you need an extra table in your repository,
# sysres, which is created using the rwl_sysres.sql
# script.  

# Note that the sysres table has more columns
# than currently used by this script, to allow
# for further data to be saved from other gv$ views

# variables to store results from v$sys_time_model query
private string t_name;
private double t_val;
private string t_dbsystim;

# variable for terminal distribution
private integer thisterm, otherterm;

integer onrac:=1; # set to zero will mean v$time_model is used

# Get data from v$sys_time_model
private sql t_query
  select stat_name, value, to_char(systimestamp,'SSSSS.FF6') from
  ( select stat_name, sum(value) value
    from v$sys_time_model
    where stat_name in 
    ('DB CPU'
    ,'background cpu time'
    ,'DB time'
    )
    group by stat_name
  )
  /
  array 3;
  define 1 t_name, 2 t_val, 3 t_dbsystim;
end;

private sql termdist_query
  select
    sum(decode(terminal,sys_context('USERENV','TERMINAL'),1,0))
    , count(*)
  from v$session 
  where username like upper(:1)
  /
  define 1 thisterm, 2 otherterm;
  bind 1 rwl_run_like;
end;

# Get data from gv$sys_time_model
private sql t_query_gv
  select stat_name, value, to_char(systimestamp,'SSSSS.FF6') from
  ( select stat_name, sum(value) value
    from gv$sys_time_model
    where stat_name in 
    ('DB CPU'
    ,'background cpu time'
    ,'DB time'
    )
    group by stat_name
  )
  /
  array 3;
  define 1 t_name, 2 t_val, 3 t_dbsystim;
end;

private sql termdist_query_gv
  select
    sum(decode(terminal,sys_context('USERENV','TERMINAL'),1,0))
    , count(*)
  from gv$session 
  where username like upper(:1)
  /
  define 1 thisterm, 2 otherterm;
  bind 1 rwl_run_like;
end;

private integer one;

private sql t_pingqry
  select 1 from dual;
  array 1;
  define 1 one;
end;

# variables to store current and previous results
private double dbcpu := 0, prvdbcpu;
private double dbtim := 0, prvdbtim;
private double bgcpu := 0, prvbgcpu;
private double cliaft, clibef, secnow := 0, secprv, msping, pingbegt;

private integer resok := 1;
# Run query against the DBA to get various time
# model data
private procedure timemodel_getres() nostatistics
  # save previous
  prvdbcpu := dbcpu;
  prvdbtim := dbtim;
  prvbgcpu := bgcpu;
  secprv := secnow;
  resok := 1; # assume data are good

  double qrysec;

  t_pingqry; # Load all memory, maybe soft parse, etc
  pingbegt := runseconds();
  t_pingqry;
  clibef := runseconds();
  msping := 1000 * (clibef-pingbegt);
  # run the query and save new values
  if onrac then
    termdist_query_gv;
    for t_query_gv loop
      if t_name = "DB CPU" then
        if t_val < prvdbcpu then
	  # bogus data
	  resok := 0;
	else
	  dbcpu := t_val;
	end if;
	# get the timestamp from the line with db cpu
	qrysec := t_dbsystim;
      else
	if t_name = "DB time" then
	  if t_val < prvdbtim then
	    resok := 0;
	  else
	    dbtim := t_val;
	  end if;
	else
	  # We allow bogus bg cpu as we 
	  # are not using it for graphs
	    bgcpu := t_val;
	end;
      end;
    end;
  else
    termdist_query;
    for t_query loop
      if t_name = "DB CPU" then
        if t_val < prvdbcpu then
	  # bogus data
	  resok := 0;
	else
	  dbcpu := t_val;
	end if;
	# get the timestamp from the line with db cpu
	qrysec := t_dbsystim;
      else
	if t_name = "DB time" then
	  if t_val < prvdbtim then
	    resok := 0;
	  else
	    dbtim := t_val;
	  end if;
	else
	  if t_val < prvbgcpu then
	    resok := 0;
	  else
	    bgcpu := t_val;
	  end if;
	end;
      end;
    end;
  end if;
  cliaft := runseconds();
  if resok then
    secnow := qrysec;
  end if;
end;

# execute once initially to get first set of values
timemodel_getres() at systemdb;

# insert values into the repository database
# call this once per second as a thread in
# your "run" command.  Note that if using
# multiple processes (-M/-P/-R flags),
# you need to make sure only one process does this
procedure timemodel_save() nostatistics
  # variables for insert
  double t_val1, t_val2, t_val3, termdist;

  # note that the sysres table isn't found by default
  # in the repository schema but is created using
  # rwl_sysres.sql 
  sql timemodel_insert
    insert into sysres
    (runnumber, second, resname, val1, val2, val3, val4, val5, val6, val7, val8, val9)
    values (:1, :2, 'TIMM', :3/1e6, :4/1e6, :5/1e6, :6, :7, :8, :9, :10, :11)
    /
    bind 1 runnumber, 2 pingbegt;
    bind 3 t_val1, 4 t_val2, 5 t_val3, 6 msping;
    bind 7 termdist;
    bind 8 dbcpu, 9 dbtim;
    bind 10 clibef, 11 cliaft;
    array 1;
  end;

  timemodel_getres() at systemdb;
  termdist := otherterm ? 1.0*thisterm/otherterm : 1.0;
  if resok then
    t_val1 := (dbcpu-prvdbcpu)
      /(secnow-secprv);
    t_val2 := (dbtim-prvdbtim)
      /(secnow-secprv);
    t_val3 := (bgcpu-prvbgcpu)
      /(secnow-secprv);
  end if;
  # This test ensures reasonable values and in particular that
  # the second over midnight
  # doesn't appear extremely negative
  if secnow-secprv >= 0.5 and resok then
    timemodel_insert;
    commit;
  end if;
end;

