# Copyright (c) 2021 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/

# xc_implementation.rwl

#
# History
#
#  bengsig  24-feb-2024 - Add waitsec, cpusec
#  bengsig   9-nov-2023 - support multiple application servers
#  bengsig   3-oct-2023 - parsefailure
#  bengsig   1-aug-2023 - Add oltpxcset markers from oltpxcrun
#  bengsig  17-jul-2023 - Show affinity properly
#  bengsig   9-may-2023 - Gradual badplan and hardparse
#  bengsig   3-apr-2023 - Allow 0 cursorcache
#  bengsig   1-nov-2022 - Add $queueeverytiming:on
#  bengsig  21-oct-2022 - Creation

$niceabort:on
$queueeverytiming:on
$mute:206

$if !defined(markerfile) $then
# This is a bit of a hack: We need to have markerfile declared in run.rwl
# such that it can be associated with a --markerfile useroption, as otherwise
# oltpcore cannot provide a value to it. It is really only used if xc_read
# is called with its argument repchg set to 1 (true) in which case the
# changes picked up by xc_read are writting to stdout and markerfile.
# And xc_read is only called with repchg true when procnumber=1 in oltpcore
string(1000) markerfile := "";
$endif

if markerfile != "" then
  system "rm -f " markerfile;
end;

$dformat:%.3f
procedure xc_marker(string txt)
  if markerfile = "" then
    return;
  end;

  file mf >>= markerfile;
  fprintf mf, "%.1f %s\n", runseconds(), txt;
  mf := null;
end;

# When external control is enabled
# this is executed every 10s
procedure xc_read(integer repchg) nostatistics
  double l_pfail, l_hard, l_csec, l_wsec, l_badp, l_lofr, l_rate, l_load, l_curl, l_sesl, l_afty;
  integer l_minp, l_maxp, l_stop, l_ccch;
  integer l_mtty, l_arrs, l_rpin;
  integer l_igpf;
  integer l_rc := 0;

  for
    select x.ratefactor l_rate
    , x.loadfactor l_load
    , x.hardparse l_hard
    , x.parsefailure l_pfail
    , x.ignore_parsefailure l_igpf
    , x.badplan l_badp
    , x.waitsec l_wsec
    , x.cpusec l_csec
    , x.minpool l_minp
    , x.maxpool l_maxp
    , x.cursorleak l_curl
    , x.sessionleak l_sesl
    , x.stopnow l_stop
    , x.logoffrate l_lofr
    , x.cursorcache l_ccch
    , x.mtittype l_mtty
    , x.arraysize l_arrs
    , x.rowspins l_rpin
    , x.affinity l_afty
    from oltpxc x
    join rwlrun w
    on w.key = x.key
    and w.hostname = x.hostname
    where w.runnumber=:runnumber
    /
  loop
    l_rc += 1;
  end loop;
  
  if l_rc=1 then
    if l_load is not null and l_load != xc_loadfactor then
      if repchg then
	writeline stderr, "At " runseconds() ": external control loadfactor is now " l_load;
	xc_marker("loadfactor=" l_load);
      end if;
      xc_loadfactor := l_load;
    end if;
    if l_rate is not null and l_rate != xc_ratefactor then
      if repchg then
	writeline stderr, "At " runseconds() ": external control ratefactor is now " l_rate;
	xc_marker("ratefactor=" l_rate);
      end if;
      xc_ratefactor := l_rate;
    end if;
    if l_hard is not null and l_hard != xc_hardparse then
      if repchg then
	writeline stderr, "At " runseconds() ": external control hardparse is now " l_hard;
	xc_marker("hardparse=" l_hard);
      end if;
      xc_hardparse := l_hard;
    end if;
    if l_igpf is not null and l_igpf != xc_ignore_parsefailure then
      if repchg then
        writeline stderr, "At " runseconds() ": external control parsefailure ORA- will be " ||
          (l_igpf ? "suppressed" : "shown") || " in next run";
      end if;
      xc_ignore_parsefailure := l_igpf;
    end if;
    if l_pfail is not null and l_pfail != xc_parsefailure then
      if repchg then
	writeline stderr, "At " runseconds() ": external control parsefailure is now " l_pfail;
	xc_marker("parsefailure=" l_pfail);
      end if;
      xc_parsefailure := l_pfail;
    end if;
    if l_csec is not null and l_csec != xc_cpusec then
      if repchg then
	fprintf stderr, "At %.2f: external control cpusec is now %.3f\n", runseconds(), l_csec;
	xc_marker("cpusec=" l_csec);
      end if;
      xc_cpusec := l_csec;
    end if;
    if l_wsec is not null and l_wsec != xc_waitsec then
      if repchg then
	fprintf stderr, "At %.2f: external control waitsec is now %.3f\n", runseconds(), l_wsec;
	xc_marker("waitsec=" l_wsec);
      end if;
      xc_waitsec := l_wsec;
    end if;
    if l_badp is not null and l_badp != xc_badplan then
      if repchg then
	fprintf stderr, "At %.2f: external control badplan is now %.3f\n", runseconds(), l_badp;
	xc_marker("badplan=" l_badp);
      end if;
      xc_badplan := l_badp;
    end if;
    if l_curl is not null and l_curl != xc_cursorleak then
      if repchg then
	writeline stderr, "At " runseconds() ": external control cursorleak is now " l_curl;
	xc_marker("cursorleak=" l_curl);
      end if;
      xc_cursorleak := l_curl;
    end if;
    if l_sesl is not null and l_sesl != xc_sessionleak then
      if repchg then
	writeline stderr, "At " runseconds() ": external control sessionleak is now " l_sesl;
	xc_marker("sessionleak=" l_sesl);
      end if;
      xc_sessionleak := l_sesl;
    end if;
    if l_stop is not null and l_stop then
      if repchg and (l_stop=1 or l_stop=2) then
	writeline stderr, "At " runseconds() ": external control now sends stop";
      end if;
      xc_stopnow := l_stop;
    end if;

    if l_lofr is not null and l_lofr != xc_logoffrate then
      if repchg then
	writeline stderr, "At " runseconds() ": external control logoffrate is now " l_lofr;
	xc_marker("logoffrate=" l_lofr);
      end if;
      xc_logoffrate := l_lofr;
    end if;

$if defined(rwl_run_pool) $then
    if l_ccch is not null and l_ccch != xc_cursorcache then
      if l_ccch < 0 then
	if repchg then
	  writeline stderr, "At " runseconds() ": external control cursorcache must be at least 0";
	end if;
      else
	if repchg then
	  writeline stderr, "At " runseconds() ": external control cursorcache is now " l_ccch;
	  xc_marker("cursorcache=" l_ccch);
	end if;
	xc_cursorcache := l_ccch;
	modify database rwl_run_pool cursorcache l_ccch;
      end if;
    end if;

 $if pool_type = "sessionpool" $then
    if     l_minp is not null 
       and l_maxp is not null
       and ( l_minp != xc_minpool or l_maxp != xc_maxpool )
    then
      if l_minp > l_maxp then
	if repchg then
	  writeline stderr, "At " runseconds() ": external control sessionpool "l_minp".."l_maxp" is not valid";
	end if;
      else
	if repchg then
	  writeline stderr, "At " runseconds() ": external control sessionpool is now "l_minp".."l_maxp;
	  xc_marker("sessionpool=" l_minp ".." l_maxp);
	end if;
	xc_minpool := l_minp;
	xc_maxpool := l_maxp;
	modify database rwl_run_pool sessionpool l_minp .. l_maxp;
      end if;
    end if;
 $endif
$endif

$if mtit_xc $then
    # mtit
    if l_mtty is not null and l_mtty != mtit_type then
      mtit_type := l_mtty;
      mtit_set_type();
      if repchg then
	writeline stderr, "At " runseconds() ": external control mtit_type is now " l_mtty ":";
	writeline stderr, mtit_type_text;
	xc_marker(mtit_type_text);
      end if;
    end if;
    if l_afty is not null and l_afty != mtit_affinity then
      if repchg then
	fprintf stderr, "At %.2f: external control mtit_affinity is now %.4f\n", runseconds(), l_afty;
	string s_afty;
	sprintf s_afty, "affinity %.4f", l_afty;
	xc_marker(s_afty);
      end if;
      mtit_affinity := l_afty;
    end if;
    if l_arrs is not null and l_arrs != mtit_array_size then
      if repchg then
	writeline stderr, "At " runseconds() ": external control mtit_array_size is now " l_arrs;
	xc_marker("arrsize " l_arrs);
      end if;
      mtit_array_size := l_arrs;
    end if;
    if l_rpin is not null and l_rpin != mtit_rows_per_exec then
      if repchg then
	writeline stderr, "At " runseconds() ": external control mtit_rows_per_exec is now " l_rpin;
	xc_marker("rwspin " l_rpin);
      end if;
      mtit_rows_per_exec := l_rpin;
    end if;
$endif
    fflush stderr;
  else
    # no row, insert one
    string l_key;
    select key l_key from rwlrun
    where runnumber=:runnumber
    /
    printline "key=" l_key ", hostname=" hostname;
    l_rate := xc_ratefactor;
    l_load := xc_loadfactor;
    l_curl := xc_cursorleak;
    l_sesl := xc_sessionleak;
    l_hard := xc_hardparse;
    l_pfail := xc_parsefailure;
    l_igpf := xc_ignore_parsefailure;
    l_badp := xc_badplan;
    l_minp := xc_minpool;
    l_maxp := xc_maxpool;
    l_stop := 0;
    l_lofr := xc_logoffrate;
    l_ccch := xc_cursorcache;
    l_mtty := mtit_type;
    l_rpin := mtit_rows_per_exec;
    l_arrs := mtit_array_size;
    l_afty := mtit_affinity;

    insert into oltpxc
    ( ratefactor
    , loadfactor
    , hardparse
    , parsefailure
    , ignore_parsefailure
    , badplan
    , minpool
    , maxpool
    , cursorleak
    , sessionleak
    , stopnow
    , cursorcache
    , logoffrate
    , mtittype, rowspins, arraysize, affinity
    , hostname, key) values
    ( :l_rate
    , :l_load
    , :l_hard
    , :l_pfail
    , :l_igpf
    , :l_badp
    , :l_minp
    , :l_maxp
    , :l_curl
    , :l_sesl
    , :l_stop
    , :l_lofr
    , :l_ccch
    , :l_mtty, :l_rpin, :l_arrs, :l_afty
    , :hostname, :l_key)
    /
    commit;
    printline "Inserted default external control for key=" l_key ", hostname=" hostname;
  end if;
end;

procedure xc_kill(string killmsg) nostatistics
  fprintf stderr, "Now terminating %s - ", killmsg;
  abort;
end xc_kill;
