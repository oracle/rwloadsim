.TH runres "1rwl" "July 2022" "RWP*Load Simulator" "Program Syntax"
.SH NAME
runres \- RWP*Load Simulator runres table and runres_a view
.SH DECLARATION
When using the -s option and a results database,
the runres table saves overall execution statistics of the execution of 
all procedures doing database
work or having the statistics attribute.
The runres_a view aggregates results from a multi process run.
.P
.nf
\fC
create table runres
( runnumber number not null
, procno    number not null
, vname     varchar2(30) not null
, wtime     number(*,6)
, etime     number(*,6)
, atime     number(*,6)
, dtime     number(*,6)
, ecount    number
, tcount    number
, constraint runres_pk primary key(runnumber, procno, vname)
)
\fR
.fi
.P
.nf
\fC
create view runres_a
( runnumber
, pcount
, vname
, wtime
, etime
, atime
, dtime
, tcount
, avgw
, avge
, avga
, avgd
, ecount
)
\fR
.fi
.SH COLUMNS
\fBrunnumber\fR
.RS 4
This is the number that uniquely identifies a run.
.RE
.P
\fBprocno pcount\fR
.RS 4
In single process runs, procno is zero, in multi-process runs, it gets its value from the Operating
System process number of from the -p option to rwloadsim.  
In the aggregate view, runres_a, the total process count is in the pcount column.
.RE
.P
\fBvname\fR
.RS 4
This is the name of the procedure being executed.
.RE
.P
\fBwtime\fR
.RS 4
Total time in seconds spent waiting to get a session from a session pool.
For a dedicated database, this time can be positive if a control loop uses queue every
and the $queueeverytiming:on directive is used.
.RE
.P
\fBetime\fR
.RS 4
Total time in seconds spent executing the code in the procedure, 
not including time used to get a session.
.RE
.P
\fBatime\fR
.RS 4
When the \fB$statsapptime:on\fR directive is used,
the time spent executing OCI calls that interact with the database
will be measured.
The total time spent using such calls effectively is time spent 
.I outside
your rwl program, and that total time is subtracted from the value saved in the \fBetime\fR column and
saved in the \fBatime\fR column.
Effectively, the \fBatime\fR column therefore is the time spent executing
.I application
code.
There is some overhead in measuring this time, and if no \fB$statsapptime:on\fR is used,
a value of zero will be stored in the \fRatime\fB column.
.P
The current list of calls where this time is measured is
OCIStmtExecute, OCIStmtFetch2, OCITransCommit, OCITransRollback, OCIPing
and OCI calls that deal with reading and writing lob data.
.RE
.P
\fBdtime\fR
.RS 4
When the \fB$statsdbtime:on\fR directive is used, OCI_ATTR_COLLECT_CALL_TIME is enabled and measured
for the OCI calls mentioned above under \fBatime\fR.
The sum of these times is subsequently saved in the \fBdbtime\fR column.
This time effectively represents the 
.I database time
spent by your rwl program.
There is some overhead in gathering this time, and if \fB$statsdbtime:on\fR is not used,
a value of zero will be stored in the \fRdtime\fB column.
.RE
.P
\fBecount\fR
.RS 4
Total number of executions of the procedure.
.RE
.P
\fBtcount\fR
.RS 4
Number of threads having an execution of this procedure.
.RE
.P
\fBavgw, avge, avga, avgd\fR
.RS 4
Average time spent waiting for a session, executing the procedure,
execuring application code respectively database time.
.RE
.SH NOTES
At present, the atime and dtime columns only contains values from executing the OCI calls mentioned
above under the description of \fBatime\fR.
The implication is that the \fBatime\fR and \fBdtime\fR columns only are correct if your procedures
do not call other procedures using a stacked at clause.
This may change in some future release.
.SH COPYRIGHT
Copyright \(co 2023 Oracle Corporation
.P
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
statistics(1rwl), controlloop(1rwl), atclause(1rwl)
