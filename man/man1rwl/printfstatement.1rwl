.TH printfstatement "1rwl" "July 2022" "RWP*Load Simulator" "Program Syntax"
.SH NAME
printf, fprintf, sprintf \- RWP*Load Simulator formatted output
.SH SYNTAX
.nf
\fC
printfstatement ::= 
  \fBsprintf\fR identifier \fB,\fR concatenation { \fB,\fR concatenation }
| \fBsprintf ||\fR identifier \fB,\fR concatenation { \fB,\fR concatenation }
| \fBfprintf\fR identifier \fB,\fR concatenation { \fB,\fR concatenation }
| \fBprintf\fR concatenation { \fB,\fR concatenation }
\fR
.fi
.P
.SH DESCRIPTION
The statements in the printf family are very similar to their equivalents in C, and
will in fact use those to do actual formatting.
.P
The first two statements using \fBsprintf\fR write to a string, the first to the
beginning of the string, and the second with \fB||\fR after the keyword 
to the end of the string.
Both will return an error if the string does not have sufficient length.
.P
The latter two statements, \fBfprintf\fR and \fBprintf\fR write to a named file
respectively stdout.
.SH USAGE
All four require at least one concatenation as argument which normally consists
of characters to be output combined with conversion specifiers starting with
a % character.
To output a terminating newline, the newline must be part of this concatenation.
The characters after the % character are interpreted as their equivalents
in C with some minor changes:
.P
The flags generally work like in C and e.g. \fB0\fR, \fB-\fR are useful to 0-pad 
respectively to left-justify.
.P
You can provide a field width as an integer or using \fB*\fR in which case the value
will be taken as the next argument to the statement.
You can similarly use \fB.\fR followed by an integer or \fB*\fR to provide a precision.
Neither of these can use an integer followed by \fB$\fR to ask for a specific argument.
.P
Only a limited set of standard conversion specifiers are useful: \fBd\fR, \fBi\fR or \fBx\fR for
integers, \fBe\fR, \fBf\fR, \fBg\fR for doubles and \fBs\fR for strings.
In addition, you can use \fBm\fR, \fBM\fR, \fBk\fR, \fBK\fR for doubles to output values with
SI prefixes.
.SH "ENGINEERING NOTATION"
You can output double values using engineering notation, i.e. with an SI prefix such as 
k for kilo, n for nano, etc. 
This is done using the \fBm\fR or \fBM\fR conversion specifier, and is useful when
the absolute value is in the range [1.0e-30;9.99e+32] or is exactly zero.
The precision has the same effect as for the standard \fBe\fR conversion implying the output
will be rounded and have one more significant digit than given by the precision.
The precision must be 2 or higher.
.P
The symbol for micro, \[mc], i.e. 1e-6 is by default using the UTF-8 encoding, which is the two hexadecimal
values 0xc2 and 0xb5; you must use the $musymbol directive to change this if your terminal
is not using the UTF-8 (or compatible) character set.
.P
The difference between the two specifiers is that \fBM\fR outputs one space character between the number and the SI-prefix,
while the \fBm\fR outputs the SI-prefix directly after the number.
.P
The decimal point is not output if no significant digits are output after it. 
This can only happen if the precision is 2 and the absolute value to be output is at least 100.
.SH "COMPUTING SIZES"
If the value to be output represents a number of bytes or similar figure that really are powers of 1024
you can use the \fBK\fR or \fBk\fR conversion specificer,
to create the output using the prefixes discussed at https://en.wikipedia.org/wiki/Binary_prefix.
The specifiers should only be used if the value is positive and lower than 1e32.
.P
If you use the \fBK\fR specificer, the output is using a prefix like the \fBm\fR specifier
with an additional letter 'i' after the prefix,
indicating the prefix is binary and based on a power of 1024.
The actual value output is therefore scaled by a power of 1.024.
Examples prefixes are Ki for kibi with the value scaled by 1.024,
Gi for gibi with the value scaled by 1.024^3, etc.
Values between 0 and 1 are output as zero and without an 'i'.
Values between 1 and 1024 are output using Ki and are scaled by 1024.
Values less than zero or larger than 1e32 are output using exponential notation, are
.I not
scaled to 
a power of 1024, and do not include the 'i'.
.P
If you use the \fBk\fR specificer, the output is as if it were using the \fBm\fR specifier
without any scaling, except 
values between 1 and 1000 that are scaled by 1000 and output using k (for kilo).
Value between 0 and 1 are output as 0.
Values less than zero or larger than 1e32 are output using exponential notation,
.P
In either case, there is no space between the value and the SI prefix.
.SH NULL
In rwloadsim, integer and double can be null and such values will by default be output
as the empty string. 
You can provide one of the flags \fBz\fR, \fBb\fR, \fBn\fR, \fBN\fR or \fBt\fR to change this behavior.
The flag \fBz\fR will cause null to be output as
zero, \fBb\fR will cause a blank, i.e. one or more space
characters, \fBn\fR or \fBN\fR will cause the output 'null' or 'NULL'.
Finally, the flag \fBt\fR will cause an argument to be taken as a string that will be output if a value is null.
.SH EXAMPLES
If you execute the following:
.P
.nf
\fC
integer a := 42, b;
double x := 12.345678;
string s := "fourtytwo";

# Show 0-padding and output of null
printf "|%07d|%d|\\n", a, b; 
printf "|%07d|%nd|\\n", a, b;

b:=4;
# Show left justification and
# how field width and precision
# are provided as parameters
printf "|%-*.*f|\\n", a/3,b,x;

# Show append to existing string
# with negative field width causing
# left justification
sprintf || s,"=%*d|", -b, a;
printline s;

# Show computer notation
printf "The speed is %.2Kbps\\n", 2.5e9;
\fR
.fi
.P
the following output will be produced
.P
.nf
\fC
|0000042||
|0000042|null|
|12.3457       |
fourtytwo=42  |
The speed is 2.33Gibps
\fR
.fi
.P
The following example shows how NULL can be output as respectively the
text null or the user provided text "nothing":
.P
.nf
\fC
integer a; 
printf "|%Nd|%td|\\n", a, "nothing", a;
\fR
.fi
.P
which will produce the following output:
.P
.nf
\fC
|NULL|nothing|
\fR
.fi
.P
This example shows how the \fBm\fR specifier can be used:
.P
.nf
\fC
double tt := 12.34e-6;
printf "the time is %.3ms\\n", tt;
\fR
.fi
.P
which will produce this output with the \[mc] symbol in its UTF-8 representation.
.P
.nf
\fC
the time is 12.34\[mc]s
\fR
.fi
.SH BUGS
Computing sizes include the R and Q prefixes that not yet are officially in use.
Who knows when robi or even quebi size computers will be available?
.SH COPYRIGHT
Copyright \(co 2024 Oracle Corporation
.br
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
statement(1rwl), filestatement(1rwl), expression(1rwl), directive(1rwl)
