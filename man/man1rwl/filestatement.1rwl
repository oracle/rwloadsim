.TH filestatement "1rwl" "July 2022" "RWP*Load Simulator" "Program Syntax"
.SH NAME
file, filestatement \- RWP*Load Simulator use of files
.SH SYNTAX
identifier ( \fB>=\fR | \fB>>=\fR | \fB<=\fR | \fB>|=\fR | \fB<|=\fR ) concatenation
.P
identifier
.B := null
.P
.nf
\fC
filestatement ::= 
  \fBwrite\fR identifier \fB,\fR concatenation { \fB,\fR concatenation }
| \fBwriteline\fR identifier { \fB,\fR concatenation }
| \fBreadline\fR identifier \fB,\fR identifier { \fB,\fR identifier }
| \fBfflush\fR identifier
| \fBprint\fR concatenation { \fB,\fR concatenation }
| \fBprintline\fR concatenation { \fB,\fR concatenation }
| \fBprintline\fR

readloop ::=
  \fBfor\fR \fBreadline\fR identifier \fB,\fR identifier { \fB,\fR identifier } [ \fBand\fR expression ]
  \fBloop\fR
    statementlist
  \fBend\fR [ \fBloop\fR ]
\fR
.fi
.P
.SH DESCRIPTION
File in rwloadsim is implemented using FILE * from the standard I/O library in C.
A file is declared like other simple types and can be declared publicly, privately or
locally, but 
.I cannot
be used as an argument to procedures or functions.
Files are treated line-oriented although they are fully buffered by the standard I/O
library.  
Files can be opened for reading and writing similar to how the fopen(3) call does it
and can be used as pipe-lines similar to how popen(3) does it.
.P
To open a file, assign an expression containing a string to the variable,
and to close a file, assign
.B null
to it.
.SH USAGE
To open a file, use one of the assignment syntaxes where the variable v must
be a file, and the concatenation is taken as the name of the file or a pipeline
to be executed.
.P
v \fB>=\fR e 
.RS 4
Open a file for writing.
.RE
.P
v \fB>>=\fR e 
.RS 4
Open the file for appending, i.e. write at the end of the file.
.RE
.P
v \fB<=\fR e 
.RS 4
Open a file for reading.
.RE
.P
v \fB>|=\fR e 
.RS 4
Open a pipeline for writing; the concatenation will be given to the popen() call with 
a second argument of "w".
.RE
.P
v \fB<|=\fR e 
.RS 4
Open a pipeline for reading; the concatenation will be given to the popen() call with 
a second argument of "r".
.RE
.P
v \fB:=\fR \fBnull\fR 
.RS 4
Close a file or pipeline.
.RE
.P
In the cases where an ordinary file (and not a pipe-line) is opened, environment expansion
of $NAME or ${NAME} is done similar to how it is done in the shell, unless the 
.B --no-nameexpand
option or the
.B $namexpand:off
directive is in effect. 
You can also use $n where n is a single digit between 1 and 9 to expand the value of a positional
argument to rwloadsim.
This is not done for pipelines, although the popen call is likely to do it.
The same syntax with $ for environment expansion is also used on Microsoft Windows.
.P
If the concatenation is 
.B null
the file will be closed or the pipe-line terminated.
You can use any of the assign operators to do so.
.RE
.P
\fBwrite\fR v, e1 [, e2, ... ] 
.P
\fBprint\fR e1 [, e2, ... ]
.P
\fBwriteline\fR v [, e1 ... ]
.P
\fBprintline\fR [e1 ... ]
.RS 4
Write the concatenations e1, e2, etc to the named file with a single space character between each.
The
.B writeline
statement (that does not require any actual concatenation arguments) will additionally
write a new-line.
The 
.B print
and
.B printline
perform the same although writing to stdout.
.P
For more advanced output, use printfstatement(1rwl).
.P
.RE
.B fflush
v
.RS 4
Flush the file identified by the variable v; this effectively calls fflush(3).
.RE
.P
.B readline
v,s
.RS 4
The identifier v must be a file, and the identifier s must be a string.
The statement reads one line from the file up to and including the newline
character and assigns the line except the terminating newline character to the string s.
.RE
.P
\fBreadline\fR v\fB,\fR i1\fB,\fR i2\fB,\fR  ...
.RS 4
The identifier v must be a file from which a line is read.
The line is split into white-space separated tokens that are assigned 
to the variable i1, i2, etc.
If fewer tokens than variables are found, the last will be assigned
.B null
even if they are of type string.
If there are too few variables to receive all tokens, the last variable
will have the remaining part of the line assigned to it.
In all cases, if the variables are not of type string, the usual implicit
conversion to either integer or double will take place.
.P 
.RE
.PP
\fBfor readline\fR v\fB, \fRi1\fB,\fR i2 \fBand\fR e \fBloop\fR s;s;s; \fBend\fR
.RS 4
The readloop reads
.I lines
from a file and writes them into variables.
The first identifier, v, must be a variable of type file that is open for read.
The semantics of the readline loop is somewhat similar to the semantics of doing something like
.B while read ... ; do
in the shell.
If there is only one variable, i1, in addition to the file variable, that variable must be of type
string and the full line read from the file (excluding the terminating newline)
will be saved in that variable.
.P
If there are multiple variables, i1, i2, ... they can be of type integer, double or string.
In that case, it is assumed that each line of the file contains white-space separated tokens.
The first of these will be saved in the first variable, i1,
the second in the second variable, i2, etc.
If there are more tokens in the line read from the file than there are variables to save those into,
the last variable will contain the remaining part of the line.
If there are fewer tokens in the line read from the file than there are variables, the last ones
will be \fBnull\fR, even if they are of type string.
.P
If you need more complex processing of input lines, use the first form with only
one string variable to contain the whole line, which you subsequently process using
\fBregex\fR or \fBregexextract\fR.
.P
When end-of-file is reached, the loop terminates; you still need to explicitly close the file.
.P
The optional \fBand\fR expression before the \fBloop\fR keyword,
causes reading to stop when the expression, e, is zero;
You can similarly use a \fBbreak\fR statement.
In either case, you can continue reading from the file.
.RE
.SH NOTES
You can operate on stdin, stdout or stderr by using the predefined variables named
.BR stdin ,
.B stdout
or
.B stderr
respectively.
Do not close these.
.P
Otherwise, it is an error not to close files or pipe-lines.
.P
Files and pipe-lines can very well be opened, operated upon and closed in threads.
If you open files with the same name in multiple threads, the behavior is unspecified.
.P
If you have files opened for read in your main program, they will be closed in threads.
This is also the case for stdin.
.P
If you have files opened for write in your main program, they will continue to be open
in threads.
However, there is 
.I no guarantee
that the writes from different threads are going to be separated.
In fact, it is typically the case that writes from different threads will be mixed, 
even if you use
.BR fflush .
This behavior is also happening for stdout and stderr.
.P
The readline statement as well as the readloop read the line from their input into
a buffer that by default is 2050 bytes long.
If the actual line is longer than 2050 bytes, it will be truncated and an error
will be printed.  
The buffer can be increased using the 
.B --readbuffer
option to rwloadsim.
.P
In previous versions of rwloadsim, the \fB:=\fR assignment operator existed
and the contents of the concatenation was interpreted to open for read, write, append
or as pipelines.
The actual operation was chosen by having an initial "<", ">>", "|" or a final "|"
in the concatenation.
Without any of these, the file would be opened for writing.
There is a security concern with this, and it is therefore desupported in release 3.1.
.SH EXAMPLES
Still to come.
.SH COPYRIGHT
Copyright \(co 2023 Oracle Corporation
.br
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
variable(1rwl), statement(1rwl), threadexecution(1rwl),
expression(1rwl), readloop(1rwl), compoundstatement(1rwl),
printfstatement(1rwl), regex(1rwl)
