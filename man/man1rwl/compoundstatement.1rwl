.TH compoundstatement "1rwl" "July 2022" "RWP*Load Simulator" "Program Syntax"
.SH NAME
compoundstatement \- RWP*Load Simulator compound statements
.SH SYNTAX
.nf
compoundstatement ::= 
  ifstatement
| whilestatement
| counterloop
| listloop
| executionblock
| cursorloop
| readloop
| controlloop

ifstatement ::=
  \fBif\fR expression \fBthen\fR
    statementlist
    [ { \fBelseif\fR expression \fBthen\fR statementlist } ]
    [ \fBelse\fR statementlist ]
  \fBend\fR [ \fBif\fR ]

whilestatement ::=
  \fBwhile\fR expression \fBloop\fR
    statementlist
  \fBend\fR [ \fBloop\fR ]

counterloop ::=
  \fBfor\fR identifier \fB:=\fR expression \fB..\fR expression
  \fBloop\fR
    statementlist
  \fBend\fR [ \fBloop\fR ]

listloop ::=
  \fBfor\fR identifier \fB:=\fR concatenation \fB,\fR concatenation { \fB,\fR concatenation }
  \fBloop\fR
    statementlist
  \fBend\fR [ \fBloop\fR ]

executionblock ::=
  \fBexecute\fR [ atclause ]
    statementlist
  \fBend\fR [ \fBexecute\fR ]

.fi
.SH DESCRIPTION
Compound statements are used to wrap statement lists typically for conditional or repeated execution.
The control loop is described separately, the rest are described here.
.PP
\fBif\fR e \fBthen\fR s;s;s; \fBend\fR 
.PP
\fBif\fR e \fBthen\fR s;s;s; \fBelse\fR s;s;s; \fBend\fR 
.PP
\fBif\fR e \fBthen\fR s;s;s; \fBelseif\fR e \fBthen\fR s;s;s; \fBend\fR 
.PP
\fBif\fR e \fBthen\fR s;s;s; \fBelseif\fR e \fBthen\fR s;s;s; \fBelse\fR s;s;s; \fBend\fR 
.RS 4
The expression, e, between \fBif\fR and \fBthen\fR is evaluated and if non-zero,
the statements after \fBthen\fR are executed.
You can follow this by zero or more \fBelseif\fR parts which implies at most one of the
statement lists until the final \fBend\fR will be executed.
You can optionally have an \fBelse\fR and a statement list before \fBend\fR,
which will be executed if all if expressions are false.
If an expression evaluates to null,
a warning is shown and the statement list after \fBthen\fR will not be executed.
.RE
.PP
\fBwhile\fR e \fBloop\fR s;s;s; \fBend\fR
.RS 4
Execute the statement list between the 
.B loop
keywords and the
.B end
keyword while the expression, e, is true (non-zero).
If the expression is zero when the while loop is entered, no execution of the statement list
takes place.
.PP
.RE
.PP
\fBfor\fR v \fB:=\fR lo \fB..\fR hi \fBloop\fR s;s;s; \fBend\fR
.RS 4
The named variable, v, loops through the values of the expressions, lo and hi,
and the statement list between \fBloop\fR and \fBend\fR is executed once with each value.
The increment after each loop is one and it is recommended that the variable is of type 
integer.
If the value lo initially is higher than the value hi, no statements are executed.
The value hi is re-evaluated as an expression before each comparison to the value of the variable.
.RE
.PP
\fBfor\fR v \fB:=\fR e1 \fB,\fR e2 \fB,\fR e3 \fBloop\fR s;s;s; \fBend\fR
.RS 4
The named variable, v, loops through the comma separated list of concatenations
and the statement list between \fBloop\fR and \fBend\fR is executed once with each value.
There must be at least two concatenations in the list.
.RE
.PP
\fBexecute at\fR d s;s;s; \fBend\fR
.RS 4
The primary purpose of the execute block is to handle a list of statements as one
in particular when dealing with database connections.
If you don't have a default database, you cannot execute any sql or database statement
without specifying the at clause and using the execute block allows you to 
just have a single at clause that will be used for the statement list wrapped within
the execute block.
The variable, d, must refer to a database and if any of the statements in the list needs
a database (e.g. executing sql), the whole execute block will have a database session
upon start, that is released when finished.
.PP
Note that even if you have a default database, you need to use an execute block
if your main program executes any dml or database statements such as commit.
.RE
.PP
The readloop is described in filestatement(1rwl), the cursorloop in sqlexecution(1rwl)
and the controlloop in controlloop(1rwl).
.RE
.SH EXAMPLES
Still to come.
.SH COPYRIGHT
Copyright \(co 2023 Oracle Corporation
.br
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
controlloop(1rwl), identifier(1rwl), regex(1rwl), regexextract(1rwl), sqlexecution(1rwl),
filestatement(1rwl), atclause(1rwl), statementlist(1rwl), databasestatement(1rwl),
expression(1rwl)
