.TH directive "1rwl" "July 2022" "RWP*Load Simulator" "Program Syntax"
.SH NAME
directive \- RWP*Load Simulator directives
.SH SYNOPSIS
.B $directive:value
.SH DESCRIPTION
Directives are read while scanning the input files to rwloadsim
and most are used to modify the behavior during parsing and code generation.
They are expressly
.I not
executed and are as such not provided to the rwloadsim language parser.
.P
All directives are initiated by \fB$\fR and a sequence of lower case letters,
and most then have \fB:\fR and another sequence of non-white-space characters
that are the directive value.
For number values, there is no leading sign and only positive values are accepted.
.P
This page documents all ordinary directives.
.P
Some directives differ slightly in syntax and are documented in these separate pages:
For conditional compilation using
.B $if $then $else $endif
see conditional(1rwl).
For include file processing using
.B $include
see include(1rwl).
For option handling see useroption(1rwl).
.P
.SH "DIRECTIVES"
.B $iformat:%<format>
.RS 4
This directive sets the printf format used whenever an integer is converted to a string;
the default value is "%ld".
Only formats that actually can be used to convert integers are accepted,
and a warning will be displayed if the conversion isn't valid for a (small)
set of verification values.
.P
Some useful values may be: 
.B $iformat:%08ld
which makes the string representation of integers have up to 8 leading zeros.
The directive
.B $iformat:%20ld
will cause the string representation of integers to have 20 characters.
.P
The size of the internal buffer used to store the string
representation of an integer is at least 30 characters,
and rwloadsim ensures the buffer is not written beyond its size.
.P
Note that in the following code snippet: 
.P
.nf
\fC
integer x := 123;
$iformat:%08ld
printline x;
\fR
.fi
.P
the output will be '123' and not '00000123'.
The reason is that the string representation of the integer x
is generated when the value 123 is assigned to it,
which is before the $iformat directive.
If you want the directive to be effective in this case,
you need to include it before the assignment: 
.P
.nf
\fC
$iformat:%08d
integer x := 123;
printline x;
\fR
.fi
.P
If you need more advanced output formatting, you should consider using
the printf, fprintf or sprintf statement.
.RE
.PP
.B $dformat:%<format> 
.RS 4
This is similar to $iformat, except it is used when the string representation
of double variables is needed; similar restrictions apply.
The default dformat is %.2f, and the same minimum 30 characters buffers is used.
As an example use
.B $dformat:%.6f
to cause string representation of doubles to have 6 digits after the decimal point.
As with $iformat, advanced output formatting is available using printf, fprintf or sprintf.
.RE
.PP
.B $randseed:<hexdigits> 
.RS 4
The random number generator is normally provided a seed from /dev/urandom,
such that different executions of rwloadsim generates different random values.
If you want repeatable results, you can use this directive;
the argument is any sequence of hexadecimal digits (0-9, a-f, A-F);
up to twelve of these are used as the unsigned short entries in
the xsubi[] array used by erand48(3) and nrand48(3).
The random numbers in threads will also be repeatable as they are
generated by a thread-specific permutation of bits in the xsubi[] array.
You can optionally put 0x or 0X in front of the up to twelve hexadecimal digits. 
.RE
.PP
.B $startseconds:<double>
.br
.B $clockstart:<double>
.RS 4
These directive serves the same purpose as the
.B -c
option and they set
the common start time as a number of seconds after starting rwloadsim.
The directive must be used before the results database is declared.
The two directives have identical behavior; the reason for having both 
is that the rwloadsim developer was using both of the two terms in various circumstances.
.RE
.PP
.B $implicit:define
.br
.B $implicit:bind
.br
.B $implicit:both
.br
.B $implicit:off
.br
.B $implicit:keepcase
.br
.B $implicit:lowercase
.RS 4
These directives control implicit bind and define, i.e. for rwloadsim to implicitly match 
placeholders (bind variables) and select list elements to declared variables of the same
name in your rwl program.
.P
If any of the first three is in effect when a SQL statement is declared, that SQL statement
will be subject to implicit define, bind or both, which will take place during the first
execute. 
The fourth directive turns off both settings.
.P
Note that you can achieve the same effect for some specific SQL statement
by using either of 
.B define sql
or
.B bind sql
as part of the declaration of the SQL statement.
There is no semantic difference between the two, using the directive method is likely to
be more appropriate if you want this for all of your SQL declarations.
.P
By default, rwloadsim converts all letters in the bind variable name or select list element
name to lowercase before matching to a declared variable.
If you do not want that to happen, which implies you need your rwloadsim variable names to
be in uppercase unless you use quotes in your SQL statement, use the 
.B $implicit:keepcase
directive. 
The default behavior can be set using \fB$implicit:lowercase\fR.
.RE
.PP
.B $bindoutname:on
.br
.B $bindoutname:on:identifierprefix
.br
.B $bindoutname:off
.RS 4
These directives control how implicit bind can be used to also implicitly perform a bindout.
.P
Normally, whenever implicit bind is in effect, either through embedded sql or through
an $implicit directive, all binds are considered input binds, and values from the rwl program
are provided as input to the SQL or PL/SQL text.
To use a bindout where values from SQL (such as the returning clause) or PL/SQL are being
output to your rwl program, you normally need an explicit bindout.
.P
If you use either of the first two \fB$bindoutname\fR directives, a bindout will automatically
be used whenever the name of the bind variable (placeholder) in your SQL or PL/SQL text
has a specific prefix. 
With the first directive, the prefix is the three letters 'out', with the second directive,
the prefix is the identifier prefix found after the second ':'.
In that case, the identifier prefix must consist of an initial letter, followed by letters,
numerals or underscore.
.P
As an example, if you have been using
.B $bindoutname:on
a sql statement like
.P
.nf
\fC
insert into mytab(pk,val) values (myseq.nextval,:val) returning pk as :outseq;
\fR
.fi
.P
will use :outseq as a bindout which will be used with a variable named outseq.
.P
Lowercase conversion is controlled via the $lowercase directive as explained above.
.RE
.PP
.PP
.B $debugon:<debuglist>
.br
.B $debugoff:<debuglist> 
.RS 4
The debugon directive has the same effect as using the
.B -D
option to the rwloadsim executable;
debugoff reverses it.
The argument is a debug option (or a comma separated list without spaces);
each option either a hexadecimal value (potentially  prefixed by 0x or 0X)
or one of the text strings shown at the rwloadsim(1rwl) page.
.RE
.P
.B $mute:<integer>
.br
.B $alwaysmute:<integer>
.RS 4
These directives will mute the rwl error with the number provided. 
The second directive is useful in the first file and is recognized
while scanning for things like user options, 
which implies it will take effect very early during program start.
The first directive can 
be controlled via \fB$if $then\fR directives; the second cannot.
.RE
.P
.B $oraerror:stop
.br
.B $oraerror:continue 
.RS 4
The first of these tells rwloadsim to stop as soon as SQL execution gives any ORA- error.
Note that doing so can imply more errors during the actual program termination. 
The second tells rwloadsim to continue when ORA- errors are found during SQL execution.
This is the default. 
.RE
.P
.P
.B $oraerror:count
.br
.B $oraerror:nocount 
.RS 4
In previous versions of rwloadsim, statistics gathering would erroneously
increase the count of executions of some procedure in
the RUNRES, HISTOGRAM, and PERSEC
tables, even if the execution had an ORA- error.
This issue is now corrected, and the counts will therefore only
be increased if the execution had no ORA- error.
If you want to keep the previous behavior, you can use the first of these
directives.
You can reset the new behavior using the second directive.
.RE
.P
.B $oraerror:showoci
.br
.B $oraerror:noshowoci 
.RS 4
These directives are mostly used for debugging as they control extra information
when an ORA- error is generated.
The first directive tells rwloadsim to show the name of the Oracle Call Interface
call that was executed when an ORA- error was received.
Note that currently this is only enabled for a subset of OCI calls; as an
example, if an OCIAttrGet or OCIAttrSet call throws an ORA- error, this directive
will have no effect.
The second directive turns this extra error detail off.
.RE
.P
.B $ora01013:continue
.br
.B $ora01013:stop 
.br
.B $ora01013:break 
.br
.B $ora01013:reset 
.RS 4
Normally, ctrl-c leads to a controlled stop of the executing rwloadsim process
although the exact details of how clean-up is done cannot be guaranteed.
If you want rwloadsim to continue after receiving an ORA-01013, use the first
directive.
The second, which is the default, undoes this.
.P
The two last directives are used to allow some clean-up to be done after
issuing ctrl-c:
The third directive implies ctrl-c will break any procedure,
including anonymous procedures executing directly in your main program,
but your rwl program will otherwise continue.
To allow subsequent procedures to be executed, use the fourth directive.
For an example, see ashplot(2rwl).
.RE
.P
.B $bindoffset:0 
.RS 4
Change bind by position offset to start at zero;
this is primarily useful if you are running with event 10046 tracing
where bind value dumping starts at #0.
With this directive set, the bind position actually used with the OCIBindByPos
call is one larger than the position set at bind or bindout.
The effect of the directive can be reversed by using
.B $bindoffset:1
which is the default.
Note that this directive has no impact on the numbering of select list elements used with define. 
.RE
.P
.B $maxcode:<integer>
.br
.B $maxident:<integer>
.br
.B $readbuffer:<integer>
.RS 4
These set the maximum size of the generated p-code, the maximum number of identifiers,
or the size of the buffer used to read lines of text using
.B readline
respectively.
They serve the same purpose as the \fB-I\fR, \fB-C\fR and \fB-B\fR options
and can be used in start-up files or using the
.B $longoption
directive in the first file named with a .rwl suffix.
.RE
.P
.B $statistics:basic
.br
.B $statistics:histograms
.br
.B $statistics:all 
.RS 4
These have the same purpose as the \fB-s\fR, \fB-ss\fR, and \fB-sss\fR options respectively.
They need to be used before the repository database is declared. 
.RE
.P
.B $statsapptime:on
.br
.B $statsdbtime:on
.br
.RS 4
When statistics are saved, these directives will cause values for
the \fBatime\fR and \fBdtime\fR columns 
in the appropriate tables of the repository to also be gathered and saved.
See runres(1rwl) for details.
If needed, you can turn off the effect of these directives using 
\fB$statsapptime:off\fR or \fBstatsdbtime:off\fR
.RE
.P
.B $setaction:on
.br
.B $setaction:reset
.br
.B $setaction:off
.RS 4
The $setaction directives control setting the action (in v$session.action).
When on, the action is set to the procedure name when a database session
is acquired from a pool or a dedicated connection is being used;
the action name is set using the OCI_ATTR_ACTION attribute of the
session and is therefore sent to the database during the first coming actual round trip.
When reset is specified, the action name is reset when the session
is released or a dedicated connection no longer is in use;
using reset implies an extra otherwise unnecessary round trip to the database.  
.P
You can get the same behavior using the
.B -S
or
.B -SS
option to rwloadsim.
.P
.RE
.P
.B $oerstatistics:on
.br
.B $oerstatistics:off
.br
.B $oerstatistics:<integer>
.RS 4
These directives controls saving of ORA- error statistics similar to the
.B --oer-statistics
option.
They can be used to turn saving of error statistics on and off or
to set the maximum number of errors saved (per thread); the default is 50.
.RE
.P
.B $queue:on
.br
.B $queue:off
.RS 4
These have the same effect as the
.B -Q
and
.B -N
options;
the default is that queuing simulation using a backlog is off.
.RE
.P
.B $errortime:on
.br
.B $errortime:off
.RS 4
The first of these has the same effect as the
.B -W
option, i.e. to augment
all execution time errors with a time-stamp measured as the number of seconds since clock start.
It is primarily used as a debugging tool if the exact time of errors is needed.
The second directive turns this off.
.RE
.P
.B $nameexpand:off
.br
.B $nameexpand:on
.RS 4
The former of these has the same effect as the
.B --no-nameexpand
option;
the latter turns file name expansion using environment variable on.
.RE
.P
.B $eventnotify:on
.br
.B $eventnotify:off
.RS 4
The former has the same effect as the
.B --event-notify
option; the latter undoes
.B --event-notify
if found on the command line.
These are only available in the start-up file or via $longoption
directive in the first file named with a .rwl suffix.
.RE
.P
.B $dbfailures:<integer> 
.RS 4
If there is a temporary failure during declaration of a database, rwloadsim will
normally consider the database to be unavailable and not continue processing.
By using this directive, which must be found before your database declaration,
a temporary failure will cause a re-attempt at creating the database connection.
The integer value of the directive is limit to the number of connect attempts.
.P
Using this directive will cause session pool databases to have a minimum size
of at least one.
.P
The list of errors that are considered temporary is found in rwlerror.c.
.RE
.P
.B $embeddedqueryarray:<integer>
.br
.B $embeddeddmlarray:<integer>
.br
.RS 4
Set a default array size for respectively queries and dml when using embedded sql.
Without these being set, queries in cursor loops will use OCI pre fetch using memory (currently 100k),
and dml will not use array.
.RE
.P
.B $ampersand:on
.br
.B $ampersand:off
.RS 4
These directives turn ampersand replacement on and off.
When on, directly embedded sql can be made dynamic by including references to declared
string variables using the syntax \fB&name.\fR.
See sqlexecution(1rwl) for details.
.RE
.P
.B $sessionpool_no_rlb:on
.br
.B $sessionpool_no_rlb:off
.RS 4
These directives control the mode used to call OCISessionPoolCreate for databases
declared using \fBsessionpool\fR.
Be default, the flag OCI_SPC_NO_RLB is set, to not set this flag, use the second
directive before the database using a session pool is declared.
.RE
.P
.B $pre31fileassign:warn
.br
.B $pre31fileassign:on
.br
.B $pre31fileassign:off
.RS 4
In previous versions of rwloadsim, file assignment worked by 
having redirection characters
such as "<", ">>", "|" as part of the name of the file causing the file to
be opened for read, append or as a pipeline.
Starting with version 3.1, file assignment can only be done using the 
proper assignment operator such as <= to open for reading.
.P
If you have code that uses the previous behavior where the
redirection is part of the string, you can use
the first of these directives.
This causes such usage to be accepted but with a warning that
allows you to correct your code.
.P
The second directive makes the previous behavior accepted
.I without
printing a warning; doing so is
.I not
recommended and the possibility will be removed in a later release.
.P
The current behavior can be reset using the third directive.
.P
.RE
.B $niceabort:on
.br
.B $niceabort:off
.RS 4
When the niceabort directive is turned on, executing an abort statement
will produce a short warning rather than a comprehensive error.
The actual effect of the abort does not change.
.RE
.P
.RE
.B $queueeverytiming:on
.br
.B $queueeverytiming:off
.RS 4
By default, whenever you have a control loop that include the \fBqueue every\fR
option, the time that is registered for waiting for a session and saved in the 
wtime column of the runres and persec tables, is the time actually spent in the
OCISessionGet() call.
However, as the \fBqueue every\fR option is emulating an actual queue, the wait
time does not include the time for the thread to wait in the emulated queue.
If you use the \fB$queueeverytiming:on\fR directive, this time is included in the
waiting time.
The waiting time therefore more correctly represent the waiting time that an 
emulated end user would have seen.
This is also the case if your database is dedicated where some execution inside
a control loop starts 
.I after
the calculated time.
.RE
.P
.B $musymbol:<text>
.br
.B $musymbolfromstring:stringvar
.RS 4
When using the \fBm\fR or \fBM\fR conversion specifier in a printf statement,
the \[mc] symbol is by default output as its UTF-8 representation.
These directive can be used to set any other text string, including potentially
other characters outside the ASCII character set.
The first directive uses the value provided after the colon,
and there is no escape processing, so you must be able to enter the appropriate value
using an editor.
The second directive takes the actual value of the named string variable,
which cannot be a local variable.
.RE
.P
.B $hostname:<text>
.RS 4
Set a value for the hostname rather than getting it from the Operating System;
only letters a-z or A-Z, numerals, hyphen, period and underscore are allowed, and the initial
character cannot be hyphen or dot.
The hostname is exposed in the variable of the same name and is being inserted 
into the rwlrun table when statistics are gathered.
.P
The directive is only available in a start-up file such as ~/.rwloadsim.rwl.
.RE
.P
.B $sqllogging:stdout
.br
.B $sqllogging:stderr
.br
.B $sqllogging:file:"<text>"
.br
.B $sqllogging:append:"<text>"
.br
.B $sqllogging:off
.RS 4
These directives control logging of all sql being executed, which in particular can be useful
if you rewrite sqlplus scripts to rwl scripts.
The first two will turn on sql logging to either of stdout or stderr.
The next two will turn on sql logging to the the file named between the double quotes; the filename
can itself not contain double quote. The two directives open the file for respectively write
(i.e. truncate) or for append.
Expansion of environment variables will take place unless the $nameexpand:off directive is in effect.
The last directives turns off sql logging.
.P
Note that if you are running a real simulation, output can be extensive, and output from multiple
threads will be intermixed.
.RE
.P
.B $errordetail:on
.RS 4
This directive has effect if the client version is 23 or later and it turns on the full error detail
which includes a url to help documentation.
In earlier client versions, the directive is silently ignored.
.P
The directive is only available in a start-up file such as ~/.rwloadsim.rwl.
.RE
.P
.B $connecterror:accept
.RS 4
By default, errors during connection marks the database as unavailable, such that further
use of it is prevented.
With this directive errors during connection are handled like any other error.
It should 
.I not
normally be used as it can have several unwanted side effects including connection storms
and further errors later on.
.RE
.P
.B $useroption:name
.br
.B $userswitch:name
.br
.B $longoption:option[=value]
.RS 4
Refer to useroption(1rwl).
.RE
.P
.B $trigonometry:radians
.br
.B $trigonometry:degrees
.RS 4
By default, the trigonometry functions, sin, cos, and atan2 use degrees.
You can change this to radians using the former of these two directives.
.RE
.P
.B $filelinename:<integer>:"<text>"
.RS 4
This directive sets the line number and the file name that will be used for error reporting.
The integer provided between the first and second : set the current line number and the text
between the " delimiters sets the file name.
In the typical case, where the following line should be taken as the first line of some file,
put the value 0 as the line number.
.RE
.P
.B $include
.RS 4
Refer to include(1rwl).
.RE
.SH COPYRIGHT
Copyright \(co 2023 Oracle Corporation
.PP
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
rwloadsim(1rwl), useroption(1rwl), longoption(1rwl), include(1rwl),
conditional(1rwl), sqldeclaration(1rwl), printfstatement(1rwl), filestatement(1rwl),
sqlexecution(1rwl), runres(1rwl)
