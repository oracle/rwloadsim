.TH sqlstatement "1rwl" "July 2022" "RWP*Load Simulator" "Program Syntax"
.SH NAME
sqlstatement \- RWP*Load Simulator modify sql statements
.SH SYNTAX
.nf
\fC
sqlstatement ::=
\fBmodify\fR \fBsql\fR identifier (
  \fBcursorcache\fR
| \fBnocursorcache\fR
| \fBignoreerror\fR
| \fBarray\fR expression
| \fBarray execute\fR
| \fBleak\fR
| modifydynamicsql
)

modifydynamicsql ::=
  \fBfor\fR concatenation
| \fBbind\fR expression identifier { \fB,\fR expression identifier }
| \fBbindout\fR expression identifier { \fB,\fR expression identifier }
| \fBdefine\fR expression identifier { \fB,\fR expression identifier }
| \fBrelease\fR
\fR
.fi
.SH DESCRIPTION
The 
.B modify sql
statement is used to change simple attributes of static and dynamic sql and to 
associate text and potentially extra bind/define variables with dynamic SQL.
.PP
The statement is always initiated by 
.B modify sql name
where name is the name of a sql variable declared earlier.
.PP
.SH "OPTIONS"
.PP
.B cursorcache
or
.B nocursorcache
.RS 4
Turn the cursorcache on or off for the sql statement.
When on, the Oracle Call Interface will attempt keeping the associated statement handle
open after execution such that the next execute of the same sql will not cause a parse.
When off, the statement handle is closed after execution.
.RE
.PP
.B leak
.RS 4
When next execute of the sql statement is complete, do not close it.
The purpose of this is to simulate and observe the behavior of applications leaking cursors;
it will typically result in ORA-01000 errors at some point in time.
If you want to implement a slow cursor leak of 1% per execute, you could use code like
.P
.nf
\fC
if uniform(0,1)<0.01 then
  modify sql sqlname leak;
end if;
\fR
.fi
.P
before the code that executes your sql statement.
.RE
.PP
.B ignoreerror
.RS 4
Normally, rwloadsim will report any errors during execution of a sql statement
and potentially save this in the repository database.
This can be turned off using this option, in which case it is recommended to 
program error handling using the variables 
.B oraerror
and/or
.B oraerrortext
.RE
.PP
\fBarray expression\fR 
.RS 4
Set the number of rows in the array interface for the sql statement.
.RE
.PP
\fBarray execute\fR 
.RS 4
If the sql is a dml with an array, the array is flushed to the database.
Normally, this is only done (implicitly) at commit time.
.RE
.PP
\fBfor concatenation\fR 
.RS 4
Provide the SQL text for a dynamic sql statement, i.e. a sql variable that
has been declared without providing the SQL or PL/SQL text.
This must be done exactly once; the sql can then be executed as many times as needed.
.RE
.PP
\fBrelease\fR 
.RS 4
Disassociate the sql text from a dynamic sql statement and reset the bind and
define variables to those that are included with the declaration.
You can subsequently associate a new sql statement with it.
.RE

.PP
.B bind placeholder variable
.B [ , ... ]
.P
.B bindout placeholder variable 
.B [ , ... ]
.P
.B define position variable 
.B [ , ... ]
.RS 4
Use any of these to supply extra binds and/or defines needed a by a dynamic sql.
The placeholder is either an expression resulting in a positive integer,
or a string with the first character \fB:\fR.
The position is an expression resulting in a positive integer.
The variable is a named variable.
.P
If you want to use implicit bind and/or define,
the appropriate specifications must
be provided when you declare your SQL statement;
there is no
.B modify sql
statement to do so.
.RE
.SH EXAMPLE
.PP
This small example shows how a dynamic sql can be declared and used.
.PP
.nf
\fC
sql getemps
  define 1 ename, 2 sal;
  array 10;
end;

# Dynamically provide the text of the query
modify sql getemps for
  "select e.ename, e.sal, d.loc"
  " from emp e join dept d"
  " on e.deptno = d.deptno"
  " where d.deptno = :1";
# one extra define needed
modify sql getemps define 3 loc;
# and one bind needed
modify sql getemps bind 1 deptno;

for deptno in 1..5 loop
  # execute the dynamic SQL several times
  for getemps loop
    printline ename, sal, loc;
  end loop;
end loop;

modify sql getemps release;
\fR
.fi
.SH NOTES
Embedded and immediate sql do not have names and cannot be modified using 
\fBmodify sql\fR.
.SH COPYRIGHT
Copyright \(co 2023 Oracle Corporation
.PP
Licensed under the Universal Permissive License v 1.0
as shown at 
https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
sqldeclaration(1rwl), sqlexecution(1rwl)
