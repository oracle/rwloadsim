.TH oltp "2rwl" "July 2022" "RWP*Load Simulator" "Workload Usage"
.SH NAME
oltp \- The RWP*Load Simulator oltp Workload
.SH DESCRIPTION
The oltp workload is a general purpose workload that executes
a mix of different "business transactions" that emulate an oltp
workload.
Some transactions have resemblance to transactions from actual 
applications while others are complete artificial.
.SH "PROJECT USE"
To use in your own project, copy the two files named \fBoltp.env\fR
and \fBoltp.rwl\fR to your working directory giving them names
after your project. 
Modify the files according to the comments in them.
The second file (copy of oltp.rwl) is frequently referred to as the
parameter file as it contains all parameters specifying runs.
.P
It is recommended that you set RWLOADSIM_PATH to (include)
the directory where you have your copy of oltp.rwl.
Otherwise, to execute any of the oltp commands, 
your current directory must be the directory where you have your
project specific copy of \fBoltp.rwl\fR.
You should normally set all needed environment variables such as
RWLOLTP_NAME and RWLOADSIM_PATH in your
project specific copy of \fBoltp.env\fR.
If you have several related projects, it is suggested that
you have each projects .env and .rwl file in the same directory as
that allows you to easily switch simply by sourcing the
appropriate .env file.
.P
The only environment variable that \fImust\fR
be set in your copy of \fBoltp.env\fR is RWLOLTP_NAME
which is your project name.
.P
Typing \fBoltpverify\fR without any options is a fast way to verify
settings are fine.
.P
Note that the project specific .rwl file often contains passwords
and that you therefore should limit permissions to directories and files
appropriately.
.P
Further details about setup is available in oltpsetup(2rwl).
.SH TRANSACTIONS
The oltp workload contains the following simulated business transactions
that are fast and of true oltp nature:
.P
\fBmakeorder\fR
.RS 4
Simulates creating an order by choosing a random customer, inserting one
line to the \fBorder\fR table, and a random number of lines into the
\fBorder_items\fR table.
.RE
.P
\fBqueryorder\fR
.RS 4
Simulates querying an order by choosing a random order, querying the
\fBorder\fR and \fBorder_items\fR tables, the latter with a join
to the \fBproducts\fR table.
.RE
.P
\fBsearchproducts\fR
.RS 4
Simulates a product search by doing a full table scan with a like
condition on the \fBproduct\fR table.
.RE
.P
\fBaw_transactions\fR
.RS 4
A completely artificial transaction that does a select for update,
and update and an insert, and in 20% of the cases does a few more DML
statements.
It is designed to potentially cause scalability issues on RAC.
.RE
.P
\fBawindex_query\fR
.RS 4
Does an index-based query against a table using an index with an
extremely poor clustering factor.
During initial setup, the table size is defined; it if is much less
than the available buffer cache, the whole table is likely to be cached,
otherwise the query is likely to always case physical reads.
.RE
.P
The oltp workload additionally contains the following simulated business transactions
that have heavy resource consumption (compared to those above) and that
therefore a more of a batch nature:
.P
\fBmakeinvoices\fR
.RS 4
Picks a random customer and emulates printing/mailing of invoices
for all orders that have been shipped.
.RE
.P
\fBcomplex_query\fR
.RS 4
A completely artificial query with high CPU usage compared to the above.
It also has potential for changes in execution plans.
.RE
.P
\fBshiporder\fR
.RS 4
Attempts fulfilling one order from a single warehouse, and if not 
possible, uses multiple warehouses.
While doing so, inventories are locked potentially causing waits;
on purpose, this part may occasionally cause deadlocks producing ORA-00060.
It will also update the status in the \fBorders\fR table to "shipped"
It is always executed in a loop that attempts shipping all orders with
status "ordered".
.RE
.P
\fBstockup\fR
.RS 4
Simulates adding inventory to many products in a random warehouse.
.RE
.SH TAGS
The oltp directory contains an experimental shell script, maketags.sh, that will create a
tags file for use by vi.
The tags file itself is also included.  
If you change current directory to the oltp directory, you can e.g. do
.PP
.B vi -t runrun
.PP
to start vi at the main run command for the workload found in the run.rwl file.
Note that the first "run" above is generated by the rwloadsim tags generation and the second "run" is
the name of the file without the .rwl suffix.
You can similarly do 
.PP
.B vi -t runrunsys
.PP
to start vi at the run command from the runsys.rwl file, which is everything related to system such
as gathering of awr snapshots.
.SH ENVIRONMENT
The following environment variables are used by the oltp workload:
.P
\fBRWLOLTP_NAME\fR
.RS 4
Sets your project name and will also be the default key used when the various
oltp commands save data in your repository.
This variable must exist.
.RE
.P
\fBRWLOLTP_GNUPLOT1\fR \fBRWLOLTP_GNUPLOT2\fR
.RS 4
When using the -g option to display running graphs using X-Windows, these
environment variables will be given to the gnuplot command line for respectively
the plot of resource usage such as database CPU and throughput.
.RE
.SH "EXTERNAL CONTROL"
The oltp workload is created with scripting and post-analysis of results in mind, and except
for the -g option to oltprun and oltpcore, not much output is generated.
To do live demonstrations, typically showing much more live graphs, the oltp workload can
be running using "External Control".
When enabled, several parameters that normally require changes to your {key}.rwl file can
be changed while a run is in progress, using either the oltpxcset(2rwl) command or 
direct updates to the rwlrun_xc table in the repository.
.SH COPYRIGHT
Copyright \(co 2023 Oracle Corporation
.br
Licensed under the Universal Permissive License v 1.0
as shown at https://oss.oracle.com/licenses/upl
.SH "SEE ALSO"
oltpcheckkey(2rwl), oltpcore(2rwl), oltpcreate(2rwl), oltpday(2rwl), oltpdrop(2rwl), oltpfilloe(2rwl), oltpforever(2rwl), oltpforever2(2rwl), oltpparams(2rwl), oltpplot(2rwl), oltprun(2rwl), oltpscale(2rwl), oltpscalereport(2rwl), oltpsetup(2rwl), oltpverify(2rwl), oltpplus(2rwl), rwloadsim(1rwl), oltpdirectory(2rwl), oltprunnumber(2rwl)
