# RWP*Load Simulator
#
# Copyright (c) 2022 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/
#
# History
#
# bengsig  28-feb-2024 - Windows port
# bengsig  19-sep-2022 - Simplified and enhanced 
# bengsig  13-sep-2022 - Now netthroughput.rwl
# bengsig  28-apr-2022 - Exit on connect error
# bengsig  18-may-2021 - Improve output
# bengsig  09-sep-2020 - Add help text
# bengsig  20-may-2020 - Creation

# This RWP*Load Simulator script it used to test
# the throughput of an Oracle NET connection
# between a client or application server and a 
# database.
#
# You will need a username, password and connect string
# that allows you to connect to your database. The only
# requirement for the user is that it needs to be able
# to execute queries; no tables or other objects will
# be created.
#
# To peform an initial, simple test, execute
#
# rwloadsim -ul username/{password}@db netthroughput.rwl
#
# To get help, execute
#
# rwloadsim -uH netthroughput.rwl
#
# The following options are accepted
# --period=NN      Will use a period of NN seconds for each test
#                  the default is 60
#
# --concurrency=NN Run that many concurrent throughput streams
#                  the default is 1
# 
# --fetcharray=NN  The the array size for the fetch loop, default is 8
#                  implying close to 100kB in each array
#
# --rampup=NN      Ramp-up time for all sessions connect, default 5s
#                  Increase if you get warning about loop starting
#                  after expected start time
#
# --verbosetest    Make the output more verbose

# If we didn't connect, don't do anything
$if not defined(default database) $then
  writeline stderr, "Missing or incorrect -l option; use -h to get help";
  exit 1;
$endif

$implicit:both

double period := 60;
integer verbosetest := 0;
integer concurrency := 1;
integer fetcharray := 8;
double rampup := 5.0;
integer mbperquery := 1;
string(2048) csvoutput;
string(2048) csvappend;
integer csvexcel := 0;

              $userhelp:"netthroughput - Measure Oracle Net throughput from database to client"
              $userhelp:"This utility makes a database connection and runs queries sending large"
              $userhelp:"data amounts back to the client and use that to measure the throughput."
              $userhelp:"You provide a number of concurrent streams doing this and can by increasing"
              $userhelp:"the count get an estimate of the maximum throughput available."
              $userhelp:"If there is access to v$mystat, both physical and logical throughput"
              $userhelp:"will be output; otherwise only logical is available."
	      $userhelp:"-l u/p@c          : Compulsory option providing database credentials"
     $useroption:period:"--period=N        : Set run period, default is 60s"
$userswitch:verbosetest:"--verbosetest     : Make output more verbose"
$useroption:concurrency:"--concurrency=N   : Run this many concurrent throughput tests, default 1"
 $useroption:fetcharray:"--fetcharray=N    : Use this array size, default 8 meaning ~100kB in each array fetch"
     $useroption:rampup:"--rampup=N        : Set rampup period for throughput tests, default is 5s"
 $useroption:mbperquery:"--mbperquery=M    : Change the default of 1MB per query"
  $useroption:csvoutput:"--csvoutput=file  : Write pure csv data to this file"
  $useroption:csvappend:"--csvappend=file  : Append pure csv data to this file"
   $userswitch:csvexcel:"--csvexcel        : Use ';' field separator and CRLF line terminator in csv file"
              $userhelp:"If you create a csv file, it always has four columns:"
              $userhelp:"1: the value of concurrency"
              $userhelp:"2: the logical throughput in MB/s"
              $userhelp:"3: the physical throughput in MB/s or 0 if not available"
              $userhelp:"4: 0 if data is reliable, otherwise the needed rampup"

integer dophys := 1;

$clockstart:0

# Check that we can read v$
integer vdollarval := 0;
sql checkvdollar
  select 42 from
  v$mystat s join v$statname n
  on s.statistic# = n.statistic#
  where n.name = 'bytes sent via SQL*Net to client'
  /
  define 1 vdollarval;
  ignoreerror;
end;

checkvdollar;

if oraerror != 0 or vdollarval != 42 then
  writeline stderr, "No access to v$ tables - only logical throughput measured";
  dophys := 0;
end if;

$oraerror:stop

if concurrency < 1 then
  writeline stderr, "Concurrency must be at least 1";
  exit 1;
end if;

# The thoughput test is based on running a query that generates 
# roughly 1MB of output in 64 rows each having five columns with
# a total of roughly 16kB of data.
# As the overhead in SQL*Net isn't known, we make the rows
# slightly smaller than 16KB, and we make sure each column is
# well below the 4000 character limit of varchar2

integer lp := 3240; # Value found experimentally to be fine

# values where the five columns are saved
string(4000) yt0, yt1, yt2, yt3, yt4;

# use the database to create a random string
# with high entropy using any printable character
# It is returned as an actual strint literal is SQL
# enclosed in ' and therefore does itself not include '
function ranstr(integer lgt) return string(4000)
is
  string(4000) retval;
  select
    translate(dbms_random.string('p',:lgt),'''',' ') retval
  from dual;
  return "'" || retval || "'";
end ranstr;

string(100000) genqry; # the query we will execute

integer i;

genqry := "select \n";
for i := 0 .. 4 loop
  genqry ||= (i ? "," : " " ) ||"to_char(ora_hash(sys_guid()),'FMXXXXXXXX') || ";
  genqry ||= ranstr(lp);
  genqry ||= " || to_char(ora_hash(sys_guid()),'FMXXXXXXXX') yt" i "\n";
end loop;
genqry ||= "from dual connect by rownum < :mbperquery * 64";

# printline genqry;
# The result of this is something like:
#
# select 
#  to_char(ora_hash(sys_guid()),'FMXXXXXXXX') || 'GSODIr[_&.' || to_char(ora_hash(sys_guid()),'FMXXXXXXXX') yt1
# ,to_char(ora_hash(sys_guid()),'FMXXXXXXXX') || '.%aX5Lus[@' || to_char(ora_hash(sys_guid()),'FMXXXXXXXX') yt2
# ,to_char(ora_hash(sys_guid()),'FMXXXXXXXX') || 'a+7Qgw7n`p' || to_char(ora_hash(sys_guid()),'FMXXXXXXXX') yt3
# ,to_char(ora_hash(sys_guid()),'FMXXXXXXXX') || '1[L(}O3nQS' || to_char(ora_hash(sys_guid()),'FMXXXXXXXX') yt4
# ,to_char(ora_hash(sys_guid()),'FMXXXXXXXX') || '`x]FO|G.m6' || to_char(ora_hash(sys_guid()),'FMXXXXXXXX') yt5
# from dual connect by rownum < :mbperquery * 64
#
# except each random string really is 3240 characters long
#
# The ora_hash(sys_guid()) returned in hex is to ensure there is no chance that any of any repeated row values
# that could cause an Oracle network layer optimization not to ship it. The high entropy also helps ensuring
# the possibility for compression in any layer is low.

# declare it as a dynamic sql
sql selNmb
  array fetcharray;
end;

double timestart, timestop;

timestart := rampup + runseconds()+0.5*concurrency; # allow time for rampup
timestop := timestart + period ;

double threads sum totalmb := 0;
double threads sum totalnetmb := 0;

integer threads sum increaseramp := 0;

procedure exec1mqueries()
  # This procedure expects a session to already be taken
  integer tot := 0;
  modify sql selNmb for genqry;

  double perqrymb := 0;

  # make sure it is parsed
  for selNmb loop
    null;
    # the 76 bytes we add here is experimentally found to be
    # the overhead in shipping the row with the five columns
    perqrymb += (76
      +lengthb(yt0)
      +lengthb(yt1)
      +lengthb(yt2)
      +lengthb(yt3)
      +lengthb(yt4)
      )/1e6 ;
  end loop;
  if verbosetest and threadnumber = 1 then
    printf "%.3fMB logical per query\n", perqrymb;
  end if;

  if runseconds() > timestart then
    printline "Thread " threadnumber " starting late at " runseconds() ", expected starttime " timestart;
    increaseramp += 1;
  end if;
  if verbosetest then
    printline "Thread " threadnumber " connected";
  end if;
    
  if threadnumber = concurrency then
    printline "All threads connected";
  end if;
  for start timestart stop timestop loop
    if loopnumber = 1 and threadnumber = 1 then
      printline "Throughput test now running " period " s";
    end if;
    for selNmb loop
      tot += 1;
    end loop;
    totalmb += perqrymb;
  end loop;

  if verbosetest then
    fprintf stderr,"Thread %d completed %d %dM loops in %.1fs returning %.0fMB logical bytes\n"
    , threadnumber, tot, mbperquery, runseconds()-timestart, totalmb;
  end if;
  modify sql selNmb release;

end procedure;

procedure start1mqueries()
  # this procedure will get the session
  # and the bytes from v$mystat if possible

  double netmb1, netmb2;
  sql qrybytes
    select s.value/1e6 netmb2 from
    v$mystat s join v$statname n
    on s.statistic# = n.statistic#
    where n.name = 'bytes sent via SQL*Net to client'
    /
  end;

  if dophys then
    qrybytes;
    netmb1 := netmb2;
    exec1mqueries();
    qrybytes;
    if verbosetest then
      fprintf stderr, "Thread %d returned %.0fMB physical bytes\n",threadnumber,  netmb2-netmb1;
    end if;
    totalnetmb += netmb2-netmb1;
  else
    exec1mqueries();
  end if;
end procedure;

printline "Connecting sessions";

run
  threads concurrency
    # delay each start to allow connect
    wait 0.5*threadnumber;
    start1mqueries();
  end threads;
end run;

file csvfile;
string csvformat;
integer docsv := 0;
integer doheader := 0;

string extracr;
$if not $windows $then
  extracr := "\r";
$endif

if csvappend != "" then
  if not access(csvappend, "fr") then
    doheader := 1;
  end if;
  csvfile >>= csvappend;
  docsv := 1;
else
  if csvoutput != "" then
    csvfile := csvoutput;
    docsv := 1;
    doheader := 1;
  end if;
end if;

if docsv then
  if doheader then
    if csvexcel then
      writeline csvfile,"streams;logicalMB/s;physicalMB/s;rampupneed" extracr "";
    else
      writeline csvfile,"#streams logicalMB/s physicalMB/s rampupneed";
    end if;
  end if;
  if csvexcel then
    csvformat := "%d;%.3f;%.3f;%.0f" extracr "\n";
  else
    csvformat := "%d %.3f %.3f %.0f\n";
  end if;
end if; 

if increaseramp then
  if dophys then
    printf "Unreliable throughput estimate %.3f GB/s logical, %.3f GB/s physical\n"
    , totalmb/period/1000.0, totalnetmb/period/1000.0;
  else
    printf "Unreliable throughput estimate %.3f GB/s logical\n"
    , totalmb/period/1000.0;
  end if;
  printline "Rerun with --rampup=" rampup+increaseramp " or higher to ensure all threads are executing concurrently";
  if docsv then
    fprintf csvfile, csvformat, concurrency, totalmb/period, totalnetmb/period, rampup+increaseramp;
  end if;
else
  if dophys then
    printf "Throughput estimate %.3f GB/s logical, %.3f GB/s physical\n"
    , totalmb/period/1000.0, totalnetmb/period/1000.0;
  else
    printf "Throughput estimate %.3f GB/s logical\n"
    , totalmb/period/1000.0;
  end if;
  if docsv then
    fprintf csvfile, csvformat, concurrency, totalmb/period, totalnetmb/period, 0;
  end if;
end if;
if docsv then
  csvfile := null;
end if;

