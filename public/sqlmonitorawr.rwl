# sqlmonitorawr.rwl
#
# Copyright (c) 2022 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/
#
# History
#
# bengsig  27-jun-2023 - Fix _, mute
# bengsig  28-apr-2022 - Exit on connect error
# bengsig  13-apr-2022 - Change output's to use hyphen
# bengsig         2018 - Creation
#
# usage:
#
# rwloadsim -ul system/{password}@//host/database sqlmonitorawr.rwl sqlid
#
# output: sqlid.html
# If we didn't connect, don't do anything
if oraerror is not null and oraerror then
  exit 1;
end if;

$longoption:file-count=1

integer show_list_query :=0;
$userswitch:show-list-query:"--show-list-query	: output a sqlplus query that lists all"

string sql_exec_start;
$useroption:sql-exec-start:"--sql-exec-start=YYYY.MM.DDTHH24:MI:SS	: provide sql-exec-start"

integer sql_exec_id := 0;
$useroption:sql-exec-id:"--sql-exec-id=N		: provide sql-exec-id"

integer sql_plan_hash_value := 0;
$useroption:sql-plan-hash-value:"--sql-plan-hash-value=N	: provide sql-plan-hash-value"

integer con_dbid := 0;
$useroption:con-dbid:"--con-dbid=con-dbid	: provide the con-dbid"

integer dbid := 0;
$useroption:dbid:"--cdbid=dbid		: provide the dbid"

string(4100) output_file;
$useroption:output-file:"--output-file=filename	: use specified filename in stead of sqlid.html"

string(4100) output_directory := "." ;
$useroption:output-directory:"--output-directory=directory	: put output file in this directory"

$oraerror:stop

string(13) sqlid;
integer report_id;

if $# = 1 then
  sqlid := $1;
end if;

if show_list_query then
  printline "-----------------";
  if sqlid = "" then
    printline "column sql_id format a13";
  end if;
  printline "select report_id,dbid,con_dbid";
  if sqlid = "" then
    printline ", EXTRACTVALUE(XMLType(report_summary)
  ,'/report_repository_summary/sql/@sql_id') sql_id" ;
  end if;
  printline ", to_number(EXTRACTVALUE(XMLType(report_summary)
  ,'/report_repository_summary/sql/plan_hash')) sql_plan_hash_value
, to_number(EXTRACTVALUE(XMLType(report_summary)
  ,'/report_repository_summary/sql/@sql_exec_id')) sql_exec_id
, to_char(to_date(EXTRACTVALUE(XMLType(report_summary)
  ,'/report_repository_summary/sql/@sql_exec_start')
  ,'MM/DD/YYYY HH24:MI:SS'),'YYYY.MM.DD\"T\"HH24:MI:SS') sql_exec_start
from dba_hist_reports
WHERE component_name = 'sqlmonitor'";
  if sqlid != "" then
  printline 
"AND EXTRACTVALUE(XMLType(report_summary)
  ,'/report_repository_summary/sql/@sql_id') = '" sqlid"'" ;
  end if;

  if dbid then
    printline "and dbid=" dbid;
  end if;

  if con_dbid then
     printline "and con_dbid=" con_dbid;
  end if;

  if sql_exec_start then
    printline "and to_char(to_date(EXTRACTVALUE(XMLType(report_summary),'/report_repository_summary/sql/@sql_exec_start')
  ,'MM/DD/YYYY HH24:MI:SS'),'YYYY.MM.DD\"T\"HH24:MI:SS')='" sql_exec_start "'";
  end if;

  if sql_exec_id then
    printline "and to_number(EXTRACTVALUE(XMLType(report_summary),'/report_repository_summary/sql/@sql_exec_id'))=" sql_exec_id;
  end if;

  if sql_plan_hash_value then
    printline "and to_number(EXTRACTVALUE(XMLType(report_summary),'/report_repository_summary/sql/plan_hash'))=" sql_plan_hash_value;
  end if;

  printline "order by report_id";
  printline "/\n-----------------";
  if $# = 0 then
    exit 0;
  end if;
end if;

if $# != 1 then
  writeline stderr, "\nusage: rwloadsim [--userhelp] [options] -ul system/{password}@//host/database sqlmonitorawr.rwl sqlid";
  exit 1;
end if;

# $mute:46
$mute:50 # use array by memory

string(10000000) txt;
string(1000000) sqltxt;

sql selrepsql
  define 1 report_id;
  bind 1 sqlid;
end;

sqltxt := "select report_id from dba_hist_reports
  where component_name = 'sqlmonitor'
  and EXTRACTVALUE(XMLType(report_summary),'/report_repository_summary/sql/@sql_id')=:1";

integer bindno := 2;

if dbid then
  sqltxt ||= "\n  and dbid=:" bindno;
  modify sql selrepsql bind bindno dbid;
  bindno += 1;
end if;

if con_dbid then
  sqltxt ||= "\n  and con_dbid=:" bindno;
  modify sql selrepsql bind bindno con_dbid;
  bindno += 1;
end if;

if sql_exec_start then
  sqltxt ||= "\n  and to_char(to_date(EXTRACTVALUE(XMLType(report_summary),'/report_repository_summary/sql/@sql_exec_start'),'MM/DD/YYYY HH24:MI:SS'),'YYYY.MM.DD\"T\"HH24:MI:SS')=:" bindno;
  modify sql selrepsql bind bindno sql_exec_start;
  bindno += 1;
end if;

if sql_exec_id then
  sqltxt ||= "\n  and to_number(EXTRACTVALUE(XMLType(report_summary),'/report_repository_summary/sql/@sql_exec_id'))=:" bindno;
  modify sql selrepsql bind bindno sql_exec_id;
  bindno += 1;
end if;

if sql_plan_hash_value then
  sqltxt ||= "\n  and to_number(EXTRACTVALUE(XMLType(report_summary),'/report_repository_summary/sql/plan_hash'))=:" bindno;
  modify sql selrepsql bind bindno sql_plan_hash_value;
  bindno += 1;
end if;

sqltxt ||="\n order by report_id";

modify sql selrepsql for sqltxt;

integer repcount := 0;
for selrepsql loop
  repcount += 1;
end;

if ! repcount then
  writeline stderr, "no reports match criteria";
  exit 1;
end if;

if repcount > 1 then
  writeline stderr, 
    "a total of " repcount 
    " reports found, generating latest with report_id=" report_id;
  writeline stderr,
    "re-execute with --show_list_query option to give a query you can execute from SQL*Plus";
end if;

sql gettherep
  bind 1 report_id;
  define 1 txt;
end sql;

#sqltxt := "select dbms_report.format_report(xmltype(report), 'active')
#from dba_hist_reports_details where report_id = :1";
# use the documented plsql package:
sqltxt := "select dbms_auto_report.report_repository_detail(:1, 'active') from dual";


modify sql gettherep for sqltxt;
gettherep;

file out;
if txt != "" then

  if output_file = "" then
    out := output_directory "/" sqlid || ".html";
  else
    out := output_directory "/" output_file;
  end if;


  writeline out, txt;
  out := null;
end;

