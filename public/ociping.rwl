# RWP*Load Simulator
#
# Copyright (c) 2023 Oracle Corporation
# Licensed under the Universal Permissive License v 1.0
# as shown at https://oss.oracle.com/licenses/upl/
#
# History
#
# bengsig  26-feb-2024 - Use filecommands.rwl include
# bengsig  21-feb-2024 - Reduce fetch count if time is really high
# bengsig  13-jul-2023 - Warn if gnuplot is earlier than version 5.2
# bengsig   3-jul-2023 - Add concurrency execution with gnuplot
# bengsig  23-feb-2023 - All add avg/std as comment to csvfile when not excel
# bengsig   9-feb-2023 - Ensure ociping is as correct as possible
# bengsig  10-aug-2022 - improve output, csv, excel
# bengsig  29-jun-2022 - Generate project
# bengsig  28-apr-2022 - Exit on connect error
# bengsig  25-apr-2022 - Add flush
# bengsig  04-may-2021 - Creation
# 
# Execute something similar to "ping", showing the time
# to do ociping 
#
# You need to specify a default database using -l
#
# rwloadsim -ul scott/{password}@//host/service ociping.rwl
#
# It runs by default 1 minute with by default 1 second between
# ociping but you can change these values.
#
# For e.g. 20 seconds with 0.5 seconds between each connect
#
# rwloadsim --period=20 --interval=0.5 -ul scott/{password}
#
# If you leave out either of '--period' or '--interval'
# you will get the defaults of 60 and 1.
#
# Each line of output contains a timestamps in seconds and the
# time to do the ociping. Use --no-timestamp to omit the former
#
# If ociping is running in concurrency mode, the major purpose
# is to run many (almost) concurrently and generate image files
# of all results in one plot. The x-axis will be the number of
# seconds into each run and the y-axix will be the individual OCIPing()
# times of that run. Each of the concurrent runs will establish a
# connection once initially

# If we didn't connect, don't do anything
$if not defined(default database) $then
  writeline stderr, "Missing or incorrect -l option; use -h to get help";
  exit 1;
$endif

$if !defined(maketempdir) $then
 $include:<filecommands.rwl>
$endif

# Ignore warning about ignoring error
$mute:73 # RWL-073: warning at [demo/connping.rwl;21]: muting non-warning 22
# and ignore the division by zero error
$mute:22 # RWL-022: error at [demo/connping.rwl;109]: attempted division by zero

# Ignore warning about compile/runtime mismatch
$alwaysmute:206 # RWL-206: warning: OCI compile environment (19.15) is different from runtime (21.6)

private double d, t1, t2;
private double tsum := 0.0, tsq := 0.0, tcnt := 0.0;
private double tmin, tmax;

double period := 60;
double interval := 1.0;
integer timestamp := 1;
integer flush_output := 0;
integer flush_csv := 0;
integer unixepoch := 0;
integer utctime := 0;
string utcformat := "YYYY.MM.DD.HH24:MI:SS.FF2";
integer csvexcel := 0;
string(2048) csvoutput;

# anything related to multiple exeuctions and plotting
integer concurrency; 
string nameok, runname := "ociping";
string(2000) imagedir := "";
string(2000) pngdir := "";
string(2000) resultdir := "";
string runtitle := "title for ociping concurrent execution";
double max_ms := 4.0;
double min_ms := 0.0;
string plotwith := "points ps 0.5";
string plotkey  := "right outside";
               $userhelp:"ociping - run OCIPing()"
               $userhelp:"This utility will create a database connection and run OCIPing()"
               $userhelp:"repeatedly for some time reporting the roundtrip time to the database."
               $userhelp:"-l u/p@c         : compulsory option providing database credentials"
    $useroption:interval:"--interval=N     : interval between pings, default 1"
      $useroption:period:"--period=N       : time in seconds to run ping; default 60"
$userswitch:flush-output:"--flush-output   : flush stdout after each line"
   $useroption:csvoutput:"--csvoutput=file : write pure csv to the named file"
   $userswitch:flush-csv:"--flush-csv      : flush the csvfile after each line"
   $userswitch:timestamp:"--no-timestamp   : do not include timestamps"
     $userswitch:utctime:"--utctime        : timestamps will be UTC in YYYY.MM.DD.HH24:MI:SS.FF2 format"
   $useroption:utcformat:"--utcformat=fmt  : provide alternative format for utctime"
   $userswitch:unixepoch:"--unixepoch      : timestamps will be unixepoch"
    $userswitch:csvexcel:"--csvexcel       : csv has ; separator, CRLF line terminator and no #, suggest"
	       $userhelp:"                 : to also use --utctime --utcformat='YYYY/MM/DD HH24:MI:SS'"
               $userhelp:"The following options will run many concurrently and plot results"
 $useroption:concurrency:"--concurrency=N  : number of threads to start"
     $useroption:runname:"--runname=string : prefix to various files in concurrent execution"
    $useroption:runtitle:"--runtitle='text': title to be printed on image files"
   $useroption:resultdir:"--resultdir=dir  : name of directory where results files will be put"
    $useroption:imagedir:"--imagedir=dir   : name of directory where image files will be put"
      $useroption:pngdir:"--pngdir=dir     : if set, put png files here in stead of in imagedir"
      $useroption:max-ms:"--max-ms=D       : max range on the y-axis, default 4.0"
      $useroption:min-ms:"--min-ms=D       : min range on the y-axis, default 0"
    $useroption:plotwith:"--plotwith=text  : gnuplot type for plotting, default 'points ps 0.5'"
     $useroption:plotkey:"--plotkey=text   : gnuplot set key argument, default 'right outside'"
	       $userhelp:"--fullhelp       : also show help for ordinary rwloadsim options"

if unixepoch and utctime then
  writeline stderr, "--unixepoch has been turned of as --utctime is set";
  unixepoch := 0;
end if;

$clockstart:2

file csvfile;

# The procedure oneping will get a session
# from the pool and then execute ociping
# we time both and calculate the sum, etc
private integer arnum := 5;
private procedure oneping()

  # In first call, there will be a session in the pool
  # because we haven't done release database yet.
  # The first call therefore just does release database

  # To really make sure the ociping is done over a channel
  # that is as correctly as possible showing the true
  # round trip time, the ociping we measure is done while
  # we have made the channel active with something else

  integer rn;
  sql rnloop
    select rownum rn from dual connect by rownum<=:1;
    define 1 rn;
    bind 1 arnum;
    array 1;
  end;

  for rnloop loop
    ociping; # To make sure everything is in whatever caches
    # And now really measure ociping
    if rn=arnum-1 then
      t1 := runseconds();
      ociping;
      t2 := runseconds();
    end if;
  end loop;
  d := 1000.0 * (t2-t1);
  if d>50.0 then
    # when time is really long
    # only take one row in the query 
    # before we measure the time
    arnum:=2;
  end if;
  # Sum etc of ociping times
  tsum += d;
  tsq += d*d;
  tcnt += 1.0;
  # min/max
  if tmin is null or d < tmin then tmin:=d; end;
  if tmax is null or d > tmax then tmax:=d; end;
  string utc;
  if utctime then
    select to_char(systimestamp at time zone 'UTC',:utcformat) utc from dual;
  end if;

  if csvoutput != "" then
    if csvexcel then
      if timestamp then
	if utctime then
	  fprintf csvfile, "%.3f;%s\r\n", d, utc;
	else
	  fprintf csvfile, "%.3f;%.2f\r\n", d, unixepoch ? epochseconds() : t1;
	end if;
      else
	fprintf csvfile, "%.3f\r\n", d;
      end if;
    else
      if timestamp then
	if utctime then
	  fprintf csvfile, "%.3f %s\n", d, utc;
	else
	  fprintf csvfile, "%.3f %.2f\n", d, unixepoch ? epochseconds() : t1;
	end if;
      else
	fprintf csvfile, "%.3f\n", d;
      end if;
    end if;
    if flush_csv then
      fflush csvfile;
    end if;
  end if;
  if concurrency is null then
    if timestamp then
      if utctime then
	printf "%.3f %s\n", d, utc;
      else
	printf "%.3f %.1f\n", d, unixepoch ? epochseconds() : t1;
      end if;
    else
      printf "%.3f\n" , d;
    end if;
    if flush_output then
      fflush stdout;
    end if;
  end if;
end oneping;

$if concurrency is null $then
  # Classic ociping
  if csvoutput != "" then
    csvfile >= csvoutput;
    if csvexcel then
      if timestamp then
	writeline csvfile,"PING;" (unixepoch ? "EPOCH" : (utctime ? "UTCTIME" : "TIME")) "\r";
      else
	writeline csvfile,"PING\r";
      end if;
    else
      if timestamp then
	writeline csvfile,"# PING " (unixepoch ? "EPOCH" : (utctime ? "UTCTIME" : "TIME"));
      else
	writeline csvfile,"# PING";
      end if;
    end;
  end if;

  for queue every interval stop period loop
    oneping();
  end loop;

  # Print final results 
  if csvoutput != "" then
    if ! csvexcel then
      fprintf csvfile, "#ociping (ms) mean=%.3f, stddev=%.3f, min=%.3f, max=%.3f\n"
	,tsum/tcnt,sqrt((tsq-tsum*tsum/tcnt)/tcnt), tmin, tmax;
    end if;
    csvfile := null;
  end if;
  printf "ociping (ms) mean=%.3f, stddev=%.3f, min=%.3f, max=%.3f\n"
    ,tsum/tcnt,sqrt((tsq-tsum*tsum/tcnt)/tcnt), tmin, tmax;
      
$else
  string gpversion, svgmouse;
  integer gpok;
  integer rmresult := 0;
  $if $windows $then
    string dummy1, dummy3;
    file gpverpipe;
    gpverpipe <|=  "gnuplot --version";
    readline gpverpipe, dummy1, gpversion, dummy3;
    gpverpipe := null;
  $else
    system "gnuplot --version | awk '{print $2}'", gpversion;
  $endif
  if gpversion = "" then
    gpversion := "5.2"; # set some reasonable default
    writeline stderr, "gnuplot is not available, no images created";
    gpok := 0;
  else
    gpok := 1;
  end if;
  if 0.0+gpversion >= 5.2 then
    svgmouse := "mouse standalone";
  else
    writeline stderr, "gnuplot is only version " gpversion ", it is suggested to use 5.2 or later";
    svgmouse := "mouse jsdir '/usr/share/gnuplot/" gpversion "/js'";
  end if;

  # check runname is reasonable
  $if $windows $then
    if instrb(ruuname," ")
    or instrb(runname,"'")
    or instrb(runname,"/")
    or instrb(runname,"\"")
    or instrb(runname,"\t")
    or instrb(runnmae,"\\")
    then
      writeline stderr, "runname cannot contain slashes, quotes or whitespace";
      exit 2;
    end if;
  $else
    regex "^[-_,\\.a-zA-Z0-9]+$", runname, nameok;
    if nameok is null then
      writeline stderr, "runname must match the regular expression '^[-_,\\.a-zA-Z0-9]+$'";
      exit 2;
    end if;
  $endif

  # Prepare directories and plot
  if resultdir = "" then
    resultdir := maketempdir();
    if resultdir = "" then
      writeline stderr, "mktemp failed creating a directory";
      exit 2;
    end if;
    rmresult := 1;
  else
    if access(resultdir "/" runname ".plot" , "r") then
      writeline stderr, "Warning: existing files in " resultdir " will be overwritten";
    end if;
    if makedir(resultdir) then
      writeline stderr, "Cannot make directory " resultdir;
      exit 1;
    end if;
  end if;

  if imagedir = "" then
    imagedir := resultdir;
    printline "--imagedir=" imagedir " will be used";
    rmresult := 0;
  end if;
  if pngdir = "" then
    pngdir := imagedir;
  else
    if access(pngdir "/" runname ".png" , "r") then
      writeline stderr, "Warning: existing files in " pngdir " will be overwritten";
    end if;
  end if;
  if makedir(pngdir) then
    writeline stderr, "Cannot make directory " pngdir;
    exit 1;
  end if;
  if access(imagedir "/" runname ".svg" , "r") then
    writeline stderr, "Warning: existing files in " imagedir " will be overwritten";
  end if;
  if makedir(imagedir) then
    writeline stderr, "Cannot make directory " imagedir;
    exit 1;
  end if;
  # Set these properly for concurrency run
  timestamp := 1;
  utctime := 0;
  unixepoch := 0;
  csvexcel := 0;
  flush_csv := 0;

  double separation := 0.2;

  # run the concurrency ociping's
  run
    threads concurrency
      # Thread specific file
      sprintf csvoutput,"%s/%s.%04d.csv", resultdir, runname, threadnumber;
      csvfile >= csvoutput;

      # make them slightly separate
      for start threadnumber*separation
          queue every interval
	  stop period + threadnumber*separation + separation
      loop
	oneping();
	if threadnumber = concurrency
	then
	  print loopnumber " ";
	  fflush stdout;
	end if;
      end loop;

      # just to help the user who may actually look at the csv:
      fprintf csvfile, "#ociping (ms) mean=%.3f, stddev=%.3f, min=%.3f, max=%.3f\n"
	,tsum/tcnt,sqrt((tsq-tsum*tsum/tcnt)/tcnt), tmin, tmax;
      csvfile := null;

    end threads;
  end;
  printline;

  # now generate the gnuplot input
  integer c;

  file gnuplot := resultdir "/" runname ".plot";
  writeline gnuplot, "set terminal svg " svgmouse " size 640,480";
  writeline gnuplot, "set output '" imagedir "/" runname ".svg'";
  writeline gnuplot, "set yrange [" min_ms ":" max_ms "]";
  writeline gnuplot, "set title '" runtitle "'";
  writeline gnuplot, "set key " plotkey;
  writeline gnuplot, "set ylabel 'OCIPing() time in ms (capped at " max_ms "ms)'";
  for c := 1 .. concurrency loop
    fprintf gnuplot, "%s '%s/%s.%04d.csv' using 2:1 with %s title '%d' "
      , c=1 ? "plot" : ","
      , resultdir, runname, c, plotwith, c;
  end loop;
  writeline gnuplot;
  writeline gnuplot, "set terminal png";
  writeline gnuplot, "set output '" pngdir "/" runname ".png'";
  writeline gnuplot, "replot";
  gnuplot := null;
  if gpok then
    if system("gnuplot \"" resultdir "/" runname ".plot\"") then
      writeline stderr, "cannot execute gnuplot " resultdir "/" runname ".plot";
    else
      if rmresult then
        removetempdir(resultdir);
      end if;
    end if;
  else
    writeline stderr, "gnuplot is missing, input available in " resultdir "/" runname ".plot";
  end if;

$endif

